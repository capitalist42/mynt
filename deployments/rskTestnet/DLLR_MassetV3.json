{
  "address": "0xb1653CF4BccfF7f89913415Df70C3499A68E5DAd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "massetQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "massetQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "onTokensMintedCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "onTokensReceivedCalled",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBasketManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFeesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getFeesVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basketManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_registerAsERC777RecipientFlag",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_bAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bAssetQuantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetMinted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_bAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bAssetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "mintTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetMinted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        }
      ],
      "name": "onTokensMinted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_bAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetRedeemed",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "redeemByBridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetRedeemed",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_bAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "redeemTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetRedeemed",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridgeAddress",
          "type": "address"
        }
      ],
      "name": "redeemToBridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetRedeemed",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "redeemToBridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetRedeemed",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basketManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feesVaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feesManagerAddress",
          "type": "address"
        }
      ],
      "name": "upgradeToV3",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6245a31172feacba6f2b2e680defabefd7ee9ffc935ed4878311ae74165778f1",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0xb1653CF4BccfF7f89913415Df70C3499A68E5DAd",
    "transactionIndex": 0,
    "gasUsed": "3086234",
    "logsBloom": "0x
    "blockHash": "0x4cd4f2602c9185766e5f52c09ecdc3842916dd3cbf2d94aec7a1ac0938e0e8e8",
    "transactionHash": "0x6245a31172feacba6f2b2e680defabefd7ee9ffc935ed4878311ae74165778f1",
    "logs": [],
    "blockNumber": 3331338,
    "cumulativeGasUsed": "3086234",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a3e2dbf67d3233bbb3b7921dfe5a273",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"massetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"massetQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onTokensMintedCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"onTokensReceivedCalled\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBasketManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeesVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basketManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_registerAsERC777RecipientFlag\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bAssetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"onTokensMinted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemByBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"}],\"name\":\"redeemToBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemToBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basketManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesVaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesManagerAddress\",\"type\":\"address\"}],\"name\":\"upgradeToV3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract is responsible for managing mAsset and bAsset. Used for minting and burning tokens, calculating fees and calling the bridge if transaction based on token from another blockchain.\",\"methods\":{\"initialize(address,address,bool)\":{\"details\":\"Contract initializer.\",\"params\":{\"_basketManagerAddress\":\"Address of the basket manager.\",\"_registerAsERC777RecipientFlag\":\"Bool determine if contract should be register as ERC777 recipient.\",\"_tokenAddress\":\"Address of the mAsset token.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"mint(address,uint256)\":{\"details\":\"Mint a single mAsset, at a 1:1 ratio with the bAsset. This contract     must have approval to spend the senders bAsset.\",\"params\":{\"_bAsset\":\"Address of the bAsset.\",\"_bAssetQuantity\":\"Quantity in bAsset units.\"},\"return\":\"massetMinted   Number of newly minted mAssets.\"},\"mintTo(address,uint256,address)\":{\"details\":\"Mint a single mAsset to recipient address, at a 1:1 ratio with the bAsset.     This contract must have approval to spend the senders bAsset.\",\"params\":{\"_bAsset\":\"Address of the bAsset.\",\"_bAssetQuantity\":\"Quantity in bAsset units.\",\"_recipient\":\"Receipient of the newly minted mAsset tokens.\"},\"return\":\"massetMinted   Number of newly minted mAssets.\"},\"onTokensMinted(uint256,address,bytes)\":{\"details\":\"This is called by the bridge to let us know the user has sent tokens through it and     into the mAsset.\",\"params\":{\"_orderAmount\":\"Units of the mAsset to redeem.\",\"_tokenAddress\":\"Address of the bAsset to redeem.\",\"_userData\":\"Address of the final recipient as ABI encoded bytes.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(address,uint256)\":{\"details\":\"Credits the sender with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.\",\"params\":{\"_bAsset\":\"Address of the bAsset to redeem.\",\"_massetQuantity\":\"Units of the masset to redeem.\"},\"return\":\"massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\"},\"redeemByBridge(address,uint256,address)\":{\"details\":\"Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to be called by the bridge in order to have diffrent fees.\",\"params\":{\"_basset\":\"Address of the bAsset to redeem.\",\"_massetQuantity\":\"Units of the mAsset to redeem.\",\"_recipient\":\"Address to credit with withdrawn bAssets.\"},\"return\":\"massetMinted     Relative number of mAsset units burned to pay for the bAssets.\"},\"redeemTo(address,uint256,address)\":{\"details\":\"Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\",\"params\":{\"_bAsset\":\"Address of the bAsset to redeem.\",\"_massetQuantity\":\"Units of the masset to redeem.\",\"_recipient\":\"Address to credit with withdrawn bAssets.\"},\"return\":\"massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\"},\"redeemToBridge(address,uint256,address)\":{\"details\":\"Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to also call the bridge in order to have the basset tokens sent to     another blockchain.\",\"params\":{\"_basset\":\"Address of the bAsset to redeem.\",\"_massetQuantity\":\"Units of the mAsset to redeem.\",\"_recipient\":\"Address to credit with withdrawn bAssets.\"},\"return\":\"massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\"},\"redeemToBridge(address,uint256,address,address)\":{\"details\":\"Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to also call the bridge in order to have the basset tokens sent to     another blockchain.\",\"params\":{\"_basset\":\"Address of the bAsset to redeem.\",\"_bridgeAddress\":\"This is ignored and is left here for backward compatibility with the FE.\",\"_massetQuantity\":\"Units of the mAsset to redeem.\",\"_recipient\":\"Address to credit with withdrawn bAssets.\"},\"return\":\"massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"This is called by the bridge to let us know tokens have been received.\",\"params\":{\"_amount\":\"uint256 amount of tokens to transfer.\",\"_from\":\"Address token holder address.\",\"_operator\":\"Address operator requesting the transfer.\",\"_operatorData\":\"Bytes extra information provided by the operator (if any).\",\"_to\":\"Address recipient address.\",\"_userData\":\"Bytes extra information provided by the token holder (if any).\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToV3(address,address,address,address)\":{\"details\":\"Migration to V3 version.\",\"params\":{\"_basketManagerAddress\":\"Address of new BasketManagerV3.\",\"_feesManagerAddress\":\"Adress of FeesManager contract.\",\"_feesVaultAddress\":\"Address of FeesVault contract.\",\"_tokenAddress\":\"Address of mAsset token.\"}}},\"title\":\"MassetV3\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/masset/MassetV3.sol\":\"MassetV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as `account`'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0x03c69b91f23efafb5d460b32520ac5066a084347733de3078cf2ba9b33397945\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xb15af804e2bc97db51e4e103f13de9fe13f87e6b835d7a88c897966c0e58506e\"},\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x4a3a810b7ebe742e897e1fd428b3eeed2196d3acea58eaf9c566ed10d545d2ed\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6b097bc7c7762b5ad4a7447755e3654ada71d1c10f40c0ad5a4f820892f67edf\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"contracts/helpers/InitializableOwnable.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract InitializableOwnable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _initialize() internal {\\n        require(_owner == address(0), \\\"already initialized\\\");\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    * this method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n\\n    function _onlyOwner() internal view {\\n        require(isOwner(), \\\"InitializableOwnable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"InitializableOwnable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3ed80a5e37beb6037c333fd39ffa494420a1f95569c8e283d1f9cc8c742b2361\"},\"contracts/helpers/InitializableReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract InitializableReentrancyGuard {\\n    /**\\n     * 1 - not entered\\n     * 2 - entered\\n     */\\n    uint256 private _notEntered;\\n\\n    function _initialize() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = 1;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        _nonReentrant();\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = 2;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = 1;\\n    }\\n\\n    /**\\n    * @dev Prevents a contract from calling itself, directly or indirectly.\\n    * this method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n    function _nonReentrant() internal view {\\n        require(_notEntered == 1, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x59b4e853989652e1f055e2757018f85675b172a9a07f0b87206f36fc488211ed\"},\"contracts/masset/BasketManagerV3.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\n\\n\\n/**\\n * @title BasketManagerV3\\n * @dev Contract is responsible for mAsset and bAsset exchange process and\\n * managing basket with bAsset tokens.\\n * Allows to add and/or remove bAsset, calculate balances, converts tokens quantity\\n * to adjust precisions or set/get parameters: bridge, factor, range and paused.\\n */\\n\\ncontract BasketManagerV3 is InitializableOwnable {\\n\\n    using SafeMath for uint256;\\n\\n    // Events\\n\\n    /**\\n     * @dev Event emitted when basset is added.\\n     * @param basset Address of the bAsset contract.\\n     */\\n    event BassetAdded (address basset);\\n\\n    /**\\n     * @dev Event emitted when basset is removed.\\n     * @param basset Address of the bAsset contract.\\n     */\\n    event BassetRemoved (address basset);\\n\\n    /**\\n     * @dev Event emitted when factor is changed.\\n     * @param basset Address of the bAsset contract.\\n     * @param factor Factor of fees.\\n     */\\n    event FactorChanged (address basset, int256 factor);\\n\\n    /**\\n     * @dev Event emitted when bridge is changed.\\n     * @param basset Address of the bAsset contract.\\n     * @param bridge Address of bridge.\\n     */\\n    event BridgeChanged (address basset, address bridge);\\n\\n    /**\\n     * @dev Event emitted when range is changed.\\n     * @param basset    Address of the bAsset contract.\\n     * @param min       Minimal value of range.\\n     * @param max       Maximal value of range.\\n     */\\n    event RangeChanged (address basset, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Event emitted when paused is changed.\\n     * @param basset    Address of the bAsset contract.\\n     * @param paused    Determine if paused or not.\\n     */\\n    event PausedChanged (address basset, bool paused);\\n\\n    uint256 constant MAX_VALUE = 1000;\\n\\n    // state\\n    string version;\\n    address masset;\\n    address[] private bassetsArray;\\n    mapping(address => int256) private factorMap;\\n    mapping(address => address) private bridgeMap;\\n    mapping(address => uint256) private minMap;\\n    mapping(address => uint256) private maxMap;\\n    mapping(address => bool) private pausedMap;\\n\\n    // Modifiers\\n\\n    /**\\n    * @dev Prevents a contract from making actions on paused bAssets.\\n    */\\n    modifier notPaused(address _basset) {\\n        _notPaused(_basset);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Prevents a contract from making actions on invalid bAssets.\\n    */\\n    modifier validBasset(address _basset) {\\n        _validBasset(_basset);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Prevents a contract from making actions on paused bAssets.\\n    * This method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n    function _notPaused(address _basset) internal view {\\n        require(!pausedMap[_basset], \\\"basset is paused\\\");\\n    }\\n\\n\\n    /**\\n    * @dev Prevents a contract from making actions on invalid bAssets.\\n    * This method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n    function _validBasset(address _basset) internal view {\\n        require(factorMap[_basset] != 0, \\\"invalid basset\\\");\\n    }\\n\\n    // Initializer\\n\\n    /**\\n   * @dev Contract initializer.\\n   * @param _masset     Address of the mAsset contract.\\n   */\\n    function initialize(address _masset) external {\\n        require(masset == address(0), \\\"already initialized\\\");\\n        _initialize();\\n        masset = _masset;\\n        version = \\\"3.0\\\";\\n    }\\n\\n    // Methods for Masset logic\\n\\n    /**\\n     * @dev Checks if bAasset is valid by checking its presence in the bAssets factors list.\\n     */\\n    function isValidBasset(address _basset) public view returns(bool) {\\n        return (factorMap[_basset] != 0);\\n    }\\n\\n    /**\\n     * @dev Checks if ratio of bAssets in basket is within limits to make a deposit of specific asset.\\n     * @param _basset           Address of bAsset to deposit.\\n     * @param _bassetQuantity   Amount of bAssets to deposit.\\n     * @return Flag indicating whether a deposit can be made.\\n     */\\n    function checkBasketBalanceForDeposit(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) notPaused(_basset) returns(bool) {\\n\\n        (uint256 massetQuantity, ) = convertBassetToMassetQuantity(_basset, _bassetQuantity);\\n        uint256 bassetBalance = IERC20(_basset).balanceOf(masset);\\n\\n        (uint256 totalBassetBalanceInMasset, ) = convertBassetToMassetQuantity(_basset, bassetBalance);\\n\\n        uint256 balance = totalBassetBalanceInMasset.add(massetQuantity);\\n        uint256 total = getTotalMassetBalance().add(massetQuantity);\\n        uint256 ratio = balance.mul(MAX_VALUE).div(total);\\n        uint256 max = maxMap[_basset];\\n        return ratio <= max;\\n    }\\n\\n    /**\\n     * @dev Checks if ratio of bAssets in basket is within limits to make a withdrawal of specific asset.\\n     * @param _basset           Address of bAsset to redeem.\\n     * @param _bassetQuantity   Amount of bAssets to redeem.\\n     * @return Flag indicating whether a withdrawal can be made.\\n     */\\n    function checkBasketBalanceForWithdrawal(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) notPaused(_basset) returns(bool) {\\n\\n        (uint256 massetQuantity, ) = convertBassetToMassetQuantity(_basset, _bassetQuantity);\\n        uint256 bassetBalance = IERC20(_basset).balanceOf(masset);\\n        (uint256 totalBassetBalanceInMasset, ) = convertBassetToMassetQuantity(_basset, bassetBalance);\\n\\n        require(totalBassetBalanceInMasset >= massetQuantity, \\\"basset balance is not sufficient\\\");\\n\\n        uint256 balance = totalBassetBalanceInMasset.sub(massetQuantity);\\n        uint256 total = getTotalMassetBalance().sub(massetQuantity);\\n\\n        uint256 min = minMap[_basset];\\n        if (total == 0) return min == 0;\\n\\n        uint256 ratio = balance.mul(MAX_VALUE).div(total);\\n        return ratio >= min;\\n    }\\n\\n    /**\\n     * @dev Converts bAsset to mAsset quantity. This is used to adjust precision.\\n     *      Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.\\n     *      Since the ratio may cause fractions, the bAsset is adjusted to match nearest non fraction amount and returned.\\n     * @param _basset           Address of bAsset.\\n     * @param _bassetQuantity   Amount of bAssets to check.\\n     * @return Calculated amount of mAssets and Adjusted amount of bAssets.\\n     */\\n    function convertBassetToMassetQuantity(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) returns(uint256 massetQuantity, uint256 bassetQuantity) {\\n\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            massetQuantity = _bassetQuantity.div(uint256(factor));\\n            bassetQuantity = massetQuantity.mul(uint256(factor));\\n            return (massetQuantity, bassetQuantity);\\n        }\\n        massetQuantity = _bassetQuantity.mul(uint256(-factor));\\n        return (massetQuantity, _bassetQuantity);\\n    }\\n\\n    /**\\n     * @dev Converts mAsset to bAsset quantity. This is used to adjust precisions.\\n     *      Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.\\n     *      Since the ratio may cause fractions, the mAsset is adjusted to match nearest non fraction amount and returned.\\n     * @param _basset           Address of bAsset.\\n     * @param _massetQuantity   Amount of mAssets to check.\\n     * @return Calculated amount of bAssets and Adjusted amount of mAssets.\\n     */\\n    function convertMassetToBassetQuantity(\\n        address _basset,\\n        uint256 _massetQuantity) public view validBasset(_basset) returns(uint256 bassetQuantity, uint256 massetQuantity) {\\n\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            bassetQuantity = _massetQuantity.mul(uint256(factor));\\n            return (bassetQuantity, _massetQuantity);\\n        }\\n        bassetQuantity = _massetQuantity.div(uint256(-factor));\\n        massetQuantity = bassetQuantity.mul(uint256(-factor));\\n        return (bassetQuantity, massetQuantity);\\n    }\\n\\n    // Getters\\n\\n    /**\\n     * @dev Calculates total mAsset balance.\\n     * @return Calculated total balance.\\n     */\\n    function getTotalMassetBalance() public view returns (uint256 total) {\\n        for(uint i=0; i<bassetsArray.length; i++) {\\n            address basset = bassetsArray[i];\\n            uint256 balance = IERC20(basset).balanceOf(masset);\\n            (uint256 massetQuantity, ) = convertBassetToMassetQuantity(basset, balance);\\n            total += massetQuantity;\\n        }\\n    }\\n\\n    function getBassetBalance(address _basset) public view returns (uint256) {\\n        return IERC20(_basset).balanceOf(masset);\\n    }\\n\\n    function getVersion() external view returns(string memory) {\\n        return version;\\n    }\\n\\n    function getBassets() public view returns(address[] memory) {\\n        return bassetsArray;\\n    }\\n\\n    function getFactor(address _basset) public view validBasset(_basset) returns(int256) {\\n        return factorMap[_basset];\\n    }\\n\\n    function getBridge(address _basset) public view validBasset(_basset) returns(address) {\\n        return bridgeMap[_basset];\\n    }\\n\\n    function getRange(address _basset) public view validBasset(_basset) returns(uint256 min, uint256 max) {\\n        min = minMap[_basset];\\n        max = maxMap[_basset];\\n    }\\n\\n    function getPaused(address _basset) public view validBasset(_basset) returns(bool) {\\n        return pausedMap[_basset];\\n    }\\n\\n    // Admin methods\\n\\n    /**\\n     * @dev Adds a new bAsset.\\n     * @param _basset       Address of bAsset.\\n     * @param _factor       Factor amount.\\n     * @param _bridge       Address of bridge.\\n     * @param _min          Minimum ratio in basket.\\n     * @param _max          Maximum ratio in basket.\\n     * @param _paused       Flag to determine if basset should be paused.\\n     */\\n    function addBasset(address _basset, int256 _factor, address _bridge, uint256 _min, uint256 _max, bool _paused) public onlyOwner {\\n        require(_basset != address(0), \\\"invalid basset address\\\");\\n        require(factorMap[_basset] == 0, \\\"basset already exists\\\");\\n        require(_factor != 0, \\\"invalid factor\\\");\\n\\n        bassetsArray.push(_basset);\\n\\n        setFactor(_basset, _factor);\\n        setRange(_basset, _min, _max);\\n        setBridge(_basset, _bridge);\\n        setPaused(_basset, _paused);\\n\\n        emit BassetAdded(_basset);\\n    }\\n\\n    /**\\n     * @dev Adds multiple bAssets.\\n     * @notice All parameters must be arrays with proper order and equal length.\\n     */\\n    function addBassets(\\n        address[] memory _bassets, int256[] memory _factors, address[] memory _bridges,\\n        uint256[] memory _mins, uint256[] memory _maxs, bool[] memory _pausedFlags) public onlyOwner {\\n\\n        uint length = _bassets.length;\\n        require(\\n            _factors.length == length &&\\n            _bridges.length == length &&\\n            _mins.length == length &&\\n            _maxs.length == length &&\\n            _pausedFlags.length == length, \\\"invalid lengths\\\");\\n\\n        for(uint i=0; i<length; i++) {\\n            addBasset(_bassets[i], _factors[i], _bridges[i], _mins[i], _maxs[i], _pausedFlags[i]);\\n        }\\n    }\\n\\n    function setRange(address _basset, uint256 _min, uint256 _max) public validBasset(_basset) onlyOwner {\\n        require(_min <= MAX_VALUE, \\\"invalid minimum\\\");\\n        require(_max <= MAX_VALUE, \\\"invalid maximum\\\");\\n        require(_max >= _min, \\\"invalid range\\\");\\n        minMap[_basset] = _min;\\n        maxMap[_basset] = _max;\\n\\n        emit RangeChanged(_basset, _min, _max);\\n    }\\n\\n    /**\\n     * @dev Returns true if the number is power of ten.\\n     * @param x     Number to be checked.\\n     * @return      Is the number power of ten.\\n     */\\n    function isPowerOfTen(int256 x) public pure returns (bool result) {\\n        uint256 number;\\n\\n        if (x < 0) number = uint256(-x);\\n        else number = uint256(x);\\n\\n        while (number >= 10 && number % 10 == 0) {\\n            number /= 10;\\n        }\\n\\n        result = number == 1;\\n    }\\n\\n    function setFactor(address _basset, int256 _factor) public onlyOwner {\\n        require(_factor != 0, \\\"invalid factor\\\");\\n        require(_factor == 1 || isPowerOfTen(_factor), \\\"factor must be power of 10\\\");\\n        factorMap[_basset] = _factor;\\n\\n        emit FactorChanged(_basset, _factor);\\n    }\\n\\n    function setBridge(address _basset, address _bridge) public validBasset(_basset) onlyOwner {\\n        bridgeMap[_basset] = _bridge;\\n\\n        emit BridgeChanged(_basset, _bridge);\\n    }\\n\\n    function setPaused(address _basset, bool _flag) public validBasset(_basset) onlyOwner {\\n        pausedMap[_basset] = _flag;\\n\\n        emit PausedChanged(_basset, _flag);\\n    }\\n\\n    /**\\n     * @dev Removes bAsset\\n     * @param _basset       Address of bAsset to remove.\\n     */\\n    function removeBasset(address _basset) public validBasset(_basset) onlyOwner {\\n        require(getBassetBalance(_basset) == 0, \\\"balance not zero\\\");\\n        factorMap[_basset] = 0;\\n\\n        uint256 index;\\n        for(uint i = 0; i < bassetsArray.length - 1; i++) {\\n            if (bassetsArray[i] == _basset) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        bassetsArray[index] = bassetsArray[bassetsArray.length - 1];\\n        bassetsArray.pop();\\n\\n        emit BassetRemoved(_basset);\\n    }\\n}\\n\",\"keccak256\":\"0x21f4cf37686c2eb1303201f71dbf7c0dbdc2b364ea9ab0dcf1713532c2e23e23\"},\"contracts/masset/FeesManager.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\n\\n/**\\n * @title FeesManager\\n * @dev Contract is responsible for fees calculations.\\n */\\ncontract FeesManager is InitializableOwnable {\\n    using SafeMath for uint256;\\n\\n    // State\\n\\n    /**\\n     * @dev Factor of fees.\\n     * @notice a value of 10000 means that 223 equals 2.23% and 10000 equals 100%\\n     */\\n    uint256 constant public PRECISION = 10000;\\n\\n    uint256 private depositFee;\\n    uint256 private depositBridgeFee;\\n    uint256 private withdrawalFee;\\n    uint256 private withdrawalBridgeFee;\\n\\n    // Events\\n\\n    /**\\n     * @dev Emitted when deposit fee has changed.\\n     * @param depositFee            Amount of the fee.\\n     */\\n    event DepositFeeChanged (uint256 depositFee);\\n\\n    /**\\n     * @dev Emitted when deposit bridge fee has changed.\\n     * @param depositBridgeFee      Amount of the fee.\\n     */\\n    event DepositBridgeFeeChanged (uint256 depositBridgeFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal fee has changed.\\n     * @param withdrawalFee         Amount of the fee.\\n     */\\n    event WithdrawalFeeChanged (uint256 withdrawalFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal bridge fee has changed.\\n     * @param withdrawalBridgeFee   Amount of the fee.\\n     */\\n    event WithdrawalBridgeFeeChanged (uint256 withdrawalBridgeFee);\\n\\n    // Initializer\\n\\n    /**\\n     * @dev Contract initializer.\\n     * @param _depositFee           Amount of deposit fee in promils.\\n     * @param _depositBridgeFee     Amount of deposit through bridge fee in promils.\\n     * @param _withdrawalFee        Amount of redeem fee in promils.\\n     * @param _withdrawalBridgeFee  Amount of redeem through bridge fee in promils.\\n    */\\n    function initialize(\\n        uint256 _depositFee,\\n        uint256 _depositBridgeFee,\\n        uint256 _withdrawalFee,\\n        uint256 _withdrawalBridgeFee\\n    ) external {\\n        InitializableOwnable._initialize();\\n\\n        setDepositFee(_depositFee);\\n        setDepositBridgeFee(_depositBridgeFee);\\n        setWithdrawalFee(_withdrawalFee);\\n        setWithdrawalBridgeFee(_withdrawalBridgeFee);\\n    }\\n\\n    // Internal\\n\\n    /**\\n     * @dev Calculate and return fee amount based on massetAmount and type of fee.\\n     */\\n    function _calculateFee(uint256 _massetAmount, uint256 _fee) internal pure returns(uint256) {\\n        return _massetAmount.mul(_fee).div(PRECISION);\\n    }\\n\\n    // Public\\n\\n    /**\\n     * @dev Calculate and return deposit fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, depositFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for deposit through bridge.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositBridgeFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, depositBridgeFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return redeem fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, withdrawalFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for redeem through bridge.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemBridgeFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, withdrawalBridgeFee);\\n    }\\n\\n    // Getters\\n\\n    function getDepositFee () external view returns(uint256) {\\n        return depositFee;\\n    }\\n\\n    function getDepositBridgeFee () external view returns(uint256) {\\n        return depositBridgeFee;\\n    }\\n\\n    function getWithdrawalFee () external view returns(uint256) {\\n        return withdrawalFee;\\n    }\\n\\n    function getWithdrawalBridgeFee () external view returns(uint256) {\\n        return withdrawalBridgeFee;\\n    }\\n\\n    // Governance methods\\n\\n    function setDepositFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositFee = _amount;\\n        emit DepositFeeChanged(_amount);\\n    }\\n\\n    function setDepositBridgeFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositBridgeFee = _amount;\\n        emit DepositBridgeFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalFee = _amount;\\n        emit WithdrawalFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalBridgeFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalBridgeFee = _amount;\\n        emit WithdrawalBridgeFeeChanged(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36a645553be7f2a1d698fc34a71ae9610d391b96a5723808dda30a16ed766d6d\"},\"contracts/masset/IBridge.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title IBridge\\n * @dev Interface of the bridge. Bridge is used to exchange basset tokens from another blockchains.\\n */\\n\\ninterface IBridge {\\n    /**\\n     * @dev Returns the version.\\n     */\\n    function version() external pure returns (string memory);\\n\\n    /**\\n     * @dev Returns the fee percentage.\\n     */\\n    function getFeePercentage() external view returns(uint);\\n\\n    /**\\n     * @dev Calculates maximal withdraw.\\n     */\\n    function calcMaxWithdraw() external view returns (uint);\\n\\n    /**\\n     * @dev ERC-20 tokens approve and transferFrom pattern\\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom for details.\\n     */\\n    function receiveTokens(address tokenToUse, uint256 amount) external returns(bool);\\n\\n    /**\\n     * @dev ERC-20 tokens approve and transferFrom pattern\\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom for details.\\n     */\\n    function receiveTokensAt(\\n        address tokenToUse,\\n        uint256 amount,\\n        address receiver,\\n        bytes calldata extraData\\n    ) external returns(bool);\\n\\n    /**\\n     * @dev ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details.\\n     */\\n    function tokensReceived (\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Accepts the transaction from the other chain that was voted and sent by the federation contract.\\n     * @return Returns a boolean value indicating whether transfer was accepted.\\n     */\\n    function acceptTransfer(\\n        address originalTokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        string calldata symbol,\\n        bytes32 blockHash,\\n        bytes32 transactionHash,\\n        uint32 logIndex,\\n        uint8 decimals,\\n        uint256 granularity\\n    ) external returns(bool);\\n\\n    /**\\n     * @dev Accepts the transaction from the other chain that was voted and sent by the federation contract.\\n     * @return Returns a boolean value indicating whether transfer was accepted.\\n     */\\n    function acceptTransferAt(\\n        address originalTokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        string calldata symbol,\\n        bytes32 blockHash,\\n        bytes32 transactionHash,\\n        uint32 logIndex,\\n        uint8 decimals,\\n        uint256 granularity,\\n        bytes calldata userData\\n    ) external returns(bool);\\n\\n    /**\\n     * @dev Emitted when cross occured.\\n     */\\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes _userData,\\n        uint8 _decimals, uint256 _granularity);\\n\\n    /**\\n     * @dev Emitted when new side token is deployed.\\n     */\\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol, uint256 _granularity);\\n\\n    /**\\n     * @dev Emitted when cross transfer is accepted.\\n     */\\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount, uint8 _decimals, uint256 _granularity,\\n        uint256 _formattedAmount, uint8 _calculatedDecimals, uint256 _calculatedGranularity, bytes _userData);\\n\\n    /**\\n     * @dev Emitted when fee percentage has changed.\\n     */\\n    event FeePercentageChanged(uint256 _amount);\\n\\n    /**\\n     * @dev Emitted when error while receiving token occured.\\n     */\\n    event ErrorTokenReceiver(bytes _errorData);\\n}\\n\",\"keccak256\":\"0xe36657227d2ced8773daae121b708813a89e5b6e6f02bedaf2469aeeb2e53220\"},\"contracts/masset/MassetV3.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { IERC777Recipient } from \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport { IERC1820Registry } from \\\"@openzeppelin/contracts/introspection/IERC1820Registry.sol\\\";\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\nimport { InitializableReentrancyGuard } from \\\"../helpers/InitializableReentrancyGuard.sol\\\";\\nimport { IBridge } from \\\"./IBridge.sol\\\";\\nimport { BasketManagerV3 } from \\\"./BasketManagerV3.sol\\\";\\nimport { FeesVault } from \\\"../vault/FeesVault.sol\\\";\\nimport { FeesManager } from \\\"./FeesManager.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\n/**\\n * @title MassetV3\\n * @dev Contract is responsible for managing mAsset and bAsset.\\n * Used for minting and burning tokens, calculating fees and calling the bridge\\n * if transaction based on token from another blockchain.\\n */\\n\\ncontract MassetV3 is IERC777Recipient, InitializableOwnable, InitializableReentrancyGuard {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for Token;\\n\\n    // events\\n\\n    /**\\n     * @dev Emitted when deposit is completed.\\n     * @param minter            Address of the minter.\\n     * @param recipient         Address of the recipient.\\n     * @param massetQuantity    Masset quantity.\\n     * @param bAsset            Address of the bAsset.\\n     * @param bassetQuantity    Basset quantity.\\n     */\\n    event Minted(\\n        address indexed minter,\\n        address indexed recipient,\\n        uint256 massetQuantity,\\n        address bAsset,\\n        uint256 bassetQuantity\\n    );\\n\\n    /**\\n     * @dev Emitted when withdrawal is completed.\\n     * @param redeemer          Address of the redeemer.\\n     * @param recipient         Address of the recipient.\\n     * @param massetQuantity    Masset quantity.\\n     * @param bAsset            Address of the bAsset.\\n     * @param bassetQuantity    Basset quantity.\\n     */\\n    event Redeemed(\\n        address indexed redeemer,\\n        address indexed recipient,\\n        uint256 massetQuantity,\\n        address bAsset,\\n        uint256 bassetQuantity\\n    );\\n\\n    /**\\n     * @dev Emitted when tokensReceived method is called by the bridge.\\n     * @param operator         Address operator requesting the transfer.\\n     * @param from             Address token holder address.\\n     * @param to               Address recipient address.\\n     * @param amount           uint256 amount of tokens to transfer.\\n     * @param userData         Bytes extra information provided by the token holder (if any).\\n     * @param operatorData     Bytes extra information provided by the operator (if any).\\n     */\\n    event onTokensReceivedCalled(\\n        address operator,\\n        address from,\\n        address to,\\n        uint amount,\\n        bytes userData,\\n        bytes operatorData\\n    );\\n\\n    /**\\n     * @dev Emitted when onTokensMinted method is called by the bridge.\\n     * @param sender           Address of the sender.\\n     * @param orderAmount      Units of the masset to redeem.\\n     * @param tokenAddress     Address of the bAsset to redeem.\\n     * @param userData         Address of the final recipient as ABI encoded bytes.\\n     */\\n    event onTokensMintedCalled(\\n        address indexed sender,\\n        uint256 orderAmount,\\n        address tokenAddress,\\n        bytes userData\\n    );\\n\\n    // state\\n\\n    bytes32 constant ERC777_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    string private version;\\n\\n    BasketManagerV3 private basketManager;\\n    Token private token;\\n\\n    FeesVault private feesVault;\\n    FeesManager private feesManager;\\n\\n    // internal\\n\\n    /**\\n     * @dev Register this contracts as implementer of the \\\"ERC777 Tokens Recipient\\\" interface in the ERC1820 registry.\\n     */\\n    function registerAsERC777Recipient() internal {\\n        IERC1820Registry ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n        ERC1820.setInterfaceImplementer(address(this), ERC777_RECIPIENT_INTERFACE_HASH, address(this));\\n    }\\n\\n    // public\\n\\n    /**\\n   * @dev Contract initializer.\\n   * @param _basketManagerAddress           Address of the basket manager.\\n   * @param _tokenAddress                   Address of the mAsset token.\\n   * @param _registerAsERC777RecipientFlag  Bool determine if contract should be register as ERC777 recipient.\\n   */\\n    function initialize(\\n        address _basketManagerAddress,\\n        address _tokenAddress,\\n        bool _registerAsERC777RecipientFlag) public {\\n\\n        require(address(basketManager) == address(0) && address(token) == address(0), \\\"already initialized\\\");\\n        require(_basketManagerAddress != address(0), \\\"invalid basket manager\\\");\\n        require(_tokenAddress != address(0), \\\"invalid token\\\");\\n\\n        InitializableOwnable._initialize();\\n        InitializableReentrancyGuard._initialize();\\n\\n        basketManager = BasketManagerV3(_basketManagerAddress);\\n        token = Token(_tokenAddress);\\n        if(_registerAsERC777RecipientFlag) {\\n            registerAsERC777Recipient();\\n        }\\n\\n        version = \\\"1.0\\\";\\n    }\\n\\n    /***************************************\\n                MINTING (PUBLIC)\\n    ****************************************/\\n\\n    /**\\n     * @dev Mint a single mAsset, at a 1:1 ratio with the bAsset. This contract\\n     *      must have approval to spend the senders bAsset.\\n     * @param _bAsset         Address of the bAsset.\\n     * @param _bAssetQuantity Quantity in bAsset units.\\n     * @return massetMinted   Number of newly minted mAssets.\\n     */\\n    function mint(\\n        address _bAsset,\\n        uint256 _bAssetQuantity\\n    )\\n    external\\n    nonReentrant\\n    returns (uint256 massetMinted)\\n    {\\n        return _mintTo(_bAsset, _bAssetQuantity, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Mint a single mAsset to recipient address, at a 1:1 ratio with the bAsset.\\n     *      This contract must have approval to spend the senders bAsset.\\n     * @param _bAsset         Address of the bAsset.\\n     * @param _bAssetQuantity Quantity in bAsset units.\\n     * @param _recipient      Receipient of the newly minted mAsset tokens.\\n     * @return massetMinted   Number of newly minted mAssets.\\n     */\\n    function mintTo(\\n        address _bAsset,\\n        uint256 _bAssetQuantity,\\n        address _recipient\\n    )\\n    external\\n    nonReentrant\\n    returns (uint256 massetMinted)\\n    {\\n        return _mintTo(_bAsset, _bAssetQuantity, _recipient);\\n    }\\n\\n    /***************************************\\n              MINTING (INTERNAL)\\n    ****************************************/\\n\\n    /**\\n     * @dev Mint a single mAsset to recipient address, at a 1:1 ratio with the bAsset.\\n     *      This contract must have approval to spend the senders bAsset.\\n     * @param _basset         Address of the bAsset.\\n     * @param _bassetQuantity Quantity in bAsset units.\\n     * @param _recipient      Receipient of the newly minted mAsset tokens.\\n     * @return massetMinted   Number of newly minted mAssets.\\n     */\\n    function _mintTo(\\n        address _basset,\\n        uint256 _bassetQuantity,\\n        address _recipient\\n    )\\n    internal\\n    returns (uint256 massetMinted)\\n    {\\n        require(_recipient != address(0), \\\"must be a valid recipient\\\");\\n        require(_bassetQuantity > 0, \\\"quantity must not be 0\\\");\\n\\n        require(basketManager.isValidBasset(_basset), \\\"invalid basset\\\");\\n        require(basketManager.checkBasketBalanceForDeposit(_basset, _bassetQuantity), \\\"invalid basket\\\");\\n\\n        (uint256 massetQuantity, uint256 bassetQuantity) = basketManager.convertBassetToMassetQuantity(_basset, _bassetQuantity);\\n\\n        IERC20(_basset).safeTransferFrom(msg.sender, address(this), bassetQuantity);\\n\\n        uint256 massetsToMint = _mintAndCalulateFee(massetQuantity, false);\\n        token.mint(_recipient, massetsToMint);\\n\\n        emit Minted(msg.sender, _recipient, massetsToMint, _basset, bassetQuantity);\\n\\n        return massetsToMint;\\n    }\\n\\n    /**\\n     * @dev Mints fee to vault contract and return the amount of massets that goes to the user.\\n     * @param massetQuantity    Amount of massets.\\n     * @param _bridgeFlag       Flag that indicates if the proces is used with conjunction with bridge.\\n     * @return massetsToMint    Amount of massets that is left to mint for user.\\n     */\\n    function _mintAndCalulateFee(uint256 massetQuantity, bool _bridgeFlag) internal returns (uint256 massetsToMint) {\\n        uint256 fee;\\n        if (_bridgeFlag) {\\n            fee = feesManager.calculateDepositBridgeFee(massetQuantity);\\n        } else {\\n            fee = feesManager.calculateDepositFee(massetQuantity);\\n        }\\n\\n        massetsToMint = massetQuantity.sub(fee);\\n\\n        token.mint(address(feesVault), fee);\\n\\n        return massetsToMint;\\n    }\\n\\n    /***************************************\\n              REDEMPTION (PUBLIC)\\n    ****************************************/\\n\\n    /**\\n     * @dev Credits the sender with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.\\n     * @param _bAsset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the masset to redeem.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeem(\\n        address _bAsset,\\n        uint256 _massetQuantity\\n    ) external nonReentrant returns (uint256 massetRedeemed) {\\n        return _redeemTo(_bAsset, _massetQuantity, msg.sender, false, false);\\n    }\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     * @param _bAsset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the masset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemTo(\\n        address _bAsset,\\n        uint256 _massetQuantity,\\n        address _recipient\\n    ) external nonReentrant returns (uint256 massetRedeemed) {\\n        return _redeemTo(_bAsset, _massetQuantity, _recipient, false, false);\\n    }\\n\\n    /***************************************\\n              REDEMPTION (INTERNAL)\\n    ****************************************/\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     * @param _basset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the masset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @param _bridgeFlag       Flag that indicates if the reedem proces is used with conjunction with bridge.\\n     * @param _useCallback      Flag that indicates if this method should call onTokensMinted in case of usage of bridge.\\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function _redeemTo(\\n        address _basset,\\n        uint256 _massetQuantity,\\n        address _recipient,\\n        bool _bridgeFlag,\\n        bool _useCallback\\n    ) internal returns (uint256 massetRedeemed) {\\n        require(_recipient != address(0), \\\"must be a valid recipient\\\");\\n        require(_massetQuantity > 0, \\\"masset quantity must be greater than 0\\\");\\n        require(basketManager.isValidBasset(_basset), \\\"invalid basset\\\");\\n\\n        address massetSource = (_bridgeFlag && !_useCallback) ? _recipient : msg.sender;\\n\\n        // massetsToBurn is the amount of massets that is left to burn after the fee was taken.\\n        // It is used to calculate amount of bassets that are transfered to user.\\n        uint256 massetsAfterFee = _transferAndCalulateFee(_massetQuantity, massetSource, _bridgeFlag);\\n        (uint256 bassetQuantity, uint256 massetsToBurn) = basketManager.convertMassetToBassetQuantity(_basset, massetsAfterFee);\\n\\n        require(basketManager.checkBasketBalanceForWithdrawal(_basset, bassetQuantity), \\\"invalid basket\\\");\\n\\n        token.burn(massetSource, massetsToBurn);\\n        // In case of withdrawal to bridge the receiveTokensAt is called instead of transfer.\\n        if(_bridgeFlag && _useCallback) {\\n            address bridgeAddress = basketManager.getBridge(_basset);\\n            require(bridgeAddress != address(0), \\\"invalid bridge\\\");\\n\\n            IERC20(_basset).approve(bridgeAddress, bassetQuantity);\\n            require(\\n                IBridge(bridgeAddress).receiveTokensAt(_basset, bassetQuantity, _recipient, bytes(\\\"\\\")),\\n                \\\"call to bridge failed\\\");\\n        } else {\\n            IERC20(_basset).safeTransfer(_recipient, bassetQuantity);\\n        }\\n\\n        emit Redeemed(massetSource, _recipient, _massetQuantity, _basset, bassetQuantity);\\n\\n        return massetsToBurn;\\n    }\\n\\n    /**\\n     * @dev Transfers fee to vault contract and return the amount of massets that will be burned\\n     *      must have approval to spend the senders Masset.\\n     * @param massetQuantity        Amount of massets to withdraw.\\n     * @param sender                Owner of massets.\\n     * @param _bridgeFlag           Flag that indicates if the proces is used with conjunction with bridge.\\n     * @return massetsToBurn        Amount of massets that is left to burn.\\n     */\\n    function _transferAndCalulateFee(uint256 massetQuantity, address sender, bool _bridgeFlag) internal returns (uint256 massetsToBurn) {\\n        uint256 fee;\\n        if (_bridgeFlag) {\\n            fee = feesManager.calculateRedeemBridgeFee(massetQuantity);\\n        } else {\\n            fee = feesManager.calculateRedeemFee(massetQuantity);\\n        }\\n\\n        massetsToBurn = massetQuantity.sub(fee);\\n\\n        token.safeTransferFrom(sender, address(feesVault), fee);\\n\\n        return massetsToBurn;\\n    }\\n\\n    // For the BRIDGE\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\\n     *      another blockchain.\\n     * @param _basset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the mAsset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @param _bridgeAddress    This is ignored and is left here for backward compatibility with the FE.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemToBridge(\\n        address _basset,\\n        uint256 _massetQuantity,\\n        address _recipient,\\n        address _bridgeAddress // IGNORED! for backward compatibility\\n    ) external nonReentrant returns (uint256 massetRedeemed) {\\n        return _redeemTo(_basset, _massetQuantity, _recipient, true, true);\\n    }\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\\n     *      another blockchain.\\n     * @param _basset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the mAsset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @return massetRedeemed   Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemToBridge(\\n        address _basset,\\n        uint256 _massetQuantity,\\n        address _recipient\\n    ) external nonReentrant returns (uint256 massetRedeemed) {\\n        return _redeemTo(_basset, _massetQuantity, _recipient, true, true);\\n    }\\n\\n    /**\\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\\n     *      relative mAsset quantity from the sender. Sender also incurs a small fee, if any.\\n     *      This function is designed to be called by the bridge in order to have diffrent fees.\\n     * @param _basset           Address of the bAsset to redeem.\\n     * @param _massetQuantity   Units of the mAsset to redeem.\\n     * @param _recipient        Address to credit with withdrawn bAssets.\\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets.\\n     */\\n    function redeemByBridge(\\n        address _basset,\\n        uint256 _massetQuantity,\\n        address _recipient\\n    ) external nonReentrant returns (uint256 massetRedeemed) {\\n        address bridgeAddress = basketManager.getBridge(_basset);\\n        require(bridgeAddress != address(0), \\\"invalid bridge\\\");\\n        require(bridgeAddress == msg.sender, \\\"must be called by bridge\\\");\\n\\n        return _redeemTo(_basset, _massetQuantity, _recipient, true, false);\\n    }\\n\\n    /**\\n     * @dev Decode bytes data to address.\\n     * @param data              Data to decode.\\n     * @return address          Decoded address.\\n     */\\n    function _decodeAddress(bytes memory data) private pure returns (address) {\\n        address addr = abi.decode(data, (address));\\n        require(addr != address(0), \\\"Converter: Error decoding extraData\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Encode address to bytes data.\\n     * @param _address          Address to encode.\\n     * @return address          Decoded address.\\n     */\\n    function _encodeAddress(address _address) private pure returns (bytes memory) {\\n        require(_address != address(0), \\\"Converter: Error encoding extraData\\\");\\n        return abi.encode(_address);\\n    }\\n\\n    /**\\n     * @dev This is called by the bridge to let us know tokens have been received.\\n     * @param _operator         Address operator requesting the transfer.\\n     * @param _from             Address token holder address.\\n     * @param _to               Address recipient address.\\n     * @param _amount           uint256 amount of tokens to transfer.\\n     * @param _userData         Bytes extra information provided by the token holder (if any).\\n     * @param _operatorData     Bytes extra information provided by the operator (if any).\\n     */\\n    function tokensReceived(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _userData,\\n        bytes calldata _operatorData\\n    ) external {\\n        emit onTokensReceivedCalled(\\n            _operator,\\n            _from,\\n            _to,\\n            _amount,\\n            _userData,\\n            _operatorData\\n        );\\n    }\\n\\n    /**\\n     * @dev This is called by the bridge to let us know the user has sent tokens through it and\\n     *      into the mAsset.\\n     * @param _orderAmount      Units of the mAsset to redeem.\\n     * @param _tokenAddress     Address of the bAsset to redeem.\\n     * @param _userData         Address of the final recipient as ABI encoded bytes.\\n     */\\n    function onTokensMinted(\\n        uint256 _orderAmount,\\n        address _tokenAddress,\\n        bytes calldata _userData\\n    ) external nonReentrant {\\n        emit onTokensMintedCalled(msg.sender, _orderAmount, _tokenAddress, _userData);\\n\\n        require(_orderAmount > 0, \\\"amount must be > 0\\\");\\n\\n        address recipient =  _decodeAddress(_userData);\\n        address basset = _tokenAddress;\\n\\n        address bridgeAddress = basketManager.getBridge(basset);\\n        require(msg.sender == bridgeAddress, \\\"only bridge may call\\\");\\n\\n        require(basketManager.isValidBasset(basset), \\\"invalid basset\\\");\\n        require(basketManager.checkBasketBalanceForDeposit(basset, _orderAmount), \\\"basket out of balance\\\");\\n\\n        (uint256 massetQuantity, uint256 bassetQuantity) = basketManager.convertBassetToMassetQuantity(basset, _orderAmount);\\n        uint256 massetsToMint = _mintAndCalulateFee(massetQuantity, true);\\n        token.mint(recipient, massetsToMint);\\n\\n        emit Minted(msg.sender, recipient, massetsToMint, basset, bassetQuantity);\\n    }\\n\\n    // Getters\\n\\n    function getFeesVault() external view returns (address) {\\n        return address(feesVault);\\n    }\\n\\n    function getFeesManager() external view returns (address) {\\n        return address(feesManager);\\n    }\\n\\n    function getVersion() external view returns (string memory) {\\n        return version;\\n    }\\n\\n    function getToken() external view returns (address) {\\n        return address(token);\\n    }\\n\\n    function getBasketManager() external view returns (address) {\\n        return address(basketManager);\\n    }\\n\\n    // v3 migration\\n    /**\\n     * @dev Migration to V3 version.\\n     * @param _basketManagerAddress     Address of new BasketManagerV3.\\n     * @param _tokenAddress             Address of mAsset token.\\n     * @param _feesVaultAddress         Address of FeesVault contract.\\n     * @param _feesManagerAddress       Adress of FeesManager contract.\\n     */\\n    function upgradeToV3(\\n        address _basketManagerAddress,\\n        address _tokenAddress,\\n        address _feesVaultAddress,\\n        address _feesManagerAddress\\n    ) external {\\n        require(\\n            keccak256(bytes(version)) == keccak256(bytes(\\\"1.0\\\")) ||\\n            keccak256(bytes(version)) == keccak256(bytes(\\\"2.0\\\")), \\\"wrong version (1)\\\");\\n        require(keccak256(bytes(BasketManagerV3(_basketManagerAddress).getVersion())) == keccak256(bytes(\\\"3.0\\\")), \\\"wrong version (2)\\\");\\n        require(_feesVaultAddress != address(0), \\\"invalid vault address\\\");\\n        require(_feesManagerAddress != address(0), \\\"invalid fees manager address\\\");\\n\\n        feesVault = FeesVault(_feesVaultAddress);\\n        feesManager = FeesManager(_feesManagerAddress);\\n        basketManager = BasketManagerV3(_basketManagerAddress);\\n        token = Token(_tokenAddress);\\n        version = \\\"3.0\\\";\\n        InitializableReentrancyGuard._initialize();\\n    }\\n}\\n\",\"keccak256\":\"0xf8bbd3b2965dc45dfa374e08c120bf1a83a3ba2dd515b927680780e1d7257c04\"},\"contracts/masset/Token.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\n\\n/**\\n * @title Token\\n * @dev Implementation of masset Token.\\n * Inherits from ERC20 and ERC20Detailed with implemented\\n * mint and burn functions.\\n */\\n\\ncontract Token is ERC20, ERC20Detailed, Ownable {\\n\\n    /**\\n     * @notice Constructor called on deployment, initiates the contract.\\n     * @param _name The name of the token.\\n     * @param _symbol The symbol of the token.\\n     * @param _decimals The decimals of the token.\\n     * */\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public\\n    ERC20Detailed(_name, _symbol, _decimals) {}\\n\\n    /**\\n     * @notice Creates new tokens and sends them to the recipient.\\n     * @param _account The recipient address to get the minted tokens.\\n     * @param _amount The amount of tokens to be minted.\\n     * */\\n    function mint(address _account, uint256 _amount) public onlyOwner {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Burns tokens for the given account.\\n     * @param _account The recipient address to get the minted tokens.\\n     * @param _amount The amount of tokens to be minted.\\n     * */\\n    function burn(address _account, uint256 _amount) public onlyOwner {\\n        _burn(_account, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4f61c2add168949e71aa0ed423d2a84e0ddcf1ab1ff8c034ac7a03e3aa084bf0\"},\"contracts/vault/FeesVault.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @title FeesVault\\n * @dev Contract is used to store fees.\\n */\\ncontract FeesVault is InitializableOwnable {\\n    using SafeERC20 for IERC20;\\n\\n    function initialize() external {\\n        _initialize();\\n    }\\n\\n    /**\\n     * @dev Withdraw collected fees.\\n     * @param _token            Address of token to withdraw.\\n     * @param _amount           Amount to withdraw.\\n     * @param _recipient        Recipient of withdrawn tokens.\\n     */\\n    function withdraw (address _token, uint256 _amount, address _recipient) public onlyOwner {\\n        IERC20(_token).safeTransfer(_recipient, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x737e5f82346ca29307f341b1b6f33ddef3be11f8f32fb10d63ddaadfd25c65d4\"}},\"version\":1}",
  "bytecode": "0x6080604052612c6d806100136000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80638f32d59b116100ad578063d99c5c5711610071578063d99c5c571461024a578063e4bbb5a814610252578063eeea5d3614610265578063f2fde38b1461026d578063fb2c9223146102805761012b565b80638f32d59b146101f4578063960015a214610209578063b73b66881461021c578063c4a586371461022f578063c762819b146102425761012b565b806340c10f19116100f457806340c10f19146101ab578063438b1b4b146101be5780635337c03a146101d1578063715018a6146101e45780638da5cb5b146101ec5761012b565b806223de29146101305780630b8aad07146101455780630d8e6e2c1461016e5780631e9a69501461018357806321df0da714610196575b600080fd5b61014361013e366004611e74565b610293565b005b610158610153366004611fff565b6102e2565b6040516101659190612aef565b60405180910390f35b61017661030f565b604051610165919061294e565b610158610191366004611f82565b6103a3565b61019e6103cb565b6040516101659190612818565b6101586101b9366004611f82565b6103da565b6101586101cc366004611fbc565b6103f4565b6101436101df366004611e13565b61041a565b610143610674565b61019e6106c6565b6101fc6106d5565b6040516101659190612940565b610158610217366004611fbc565b6106f9565b61015861022a366004611fbc565b610719565b61014361023d3660046120a3565b610808565b61019e610bfa565b61019e610c09565b610143610260366004611f35565b610c18565b61019e610d1a565b61014361027b366004611dd7565b610d29565b61015861028e366004611fbc565b610d3d565b7fa693010e29186da1ce1e8a9fdf6619831117e41c17cbb8927787b66b35627be688888888888888886040516102d0989796959493929190612826565b60405180910390a15050505050505050565b60006102ec610d5a565b6002600181905550610302858585600180610d7e565b6001805595945050505050565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103985780601f1061036d57610100808354040283529160200191610398565b820191906000526020600020905b81548152906001019060200180831161037b57829003601f168201915b505050505090505b90565b60006103ad610d5a565b60026001556103c0838333600080610d7e565b600180559392505050565b6004546001600160a01b031690565b60006103e4610d5a565b60026001556103c0838333611276565b60006103fe610d5a565b600260015561040e848484611276565b60018055949350505050565b60408051808201825260038152620312e360ec1b602090910152517fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b39061046390600290612801565b604051809103902014806104c5575060408051808201825260038152620322e360ec1b602090910152517f88f72b566ae0c96f6fffac4bc8ac74909f61512ac0c06a8124d5ed420d306f90906104bb90600290612801565b6040518091039020145b6104ea5760405162461bcd60e51b81526004016104e190612a6f565b60405180910390fd5b604051806040016040528060038152602001620332e360ec1b81525080519060200120846001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105829190810190612050565b80519060200120146105a65760405162461bcd60e51b81526004016104e19061298f565b6001600160a01b0382166105cc5760405162461bcd60e51b81526004016104e190612a2f565b6001600160a01b0381166105f25760405162461bcd60e51b81526004016104e190612adf565b600580546001600160a01b038085166001600160a01b0319928316179092556006805484841690831617905560038054878416908316178155600480549387169390921692909217905560408051808201909152818152620332e360ec1b60209091019081526106659160029190611c60565b5061066e61156a565b50505050565b61067c611570565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b03166106ea611594565b6001600160a01b031614905090565b6000610703610d5a565b600260018190555061040e848484600180610d7e565b6000610723610d5a565b600260015560035460405163f44c7c8f60e01b81526000916001600160a01b03169063f44c7c8f90610759908890600401612818565b60206040518083038186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107a99190810190611df5565b90506001600160a01b0381166107d15760405162461bcd60e51b81526004016104e190612a0f565b6001600160a01b03811633146107f95760405162461bcd60e51b81526004016104e190612aaf565b61030285858560016000610d7e565b610810610d5a565b600260015560405133907fc00ef8ea79854d25cda161b949dfe54da4ddf385ef9cf6faaab7c6f9e8d9b3ac9061084d908790879087908790612afd565b60405180910390a2600084116108755760405162461bcd60e51b81526004016104e1906129bf565b60006108b683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159892505050565b60035460405163f44c7c8f60e01b815291925085916000916001600160a01b03169063f44c7c8f906108ec908590600401612818565b60206040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061093c9190810190611df5565b9050336001600160a01b038216146109665760405162461bcd60e51b81526004016104e1906129ff565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a8790610996908590600401612818565b60206040518083038186803b1580156109ae57600080fd5b505afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109e69190810190612032565b610a025760405162461bcd60e51b81526004016104e19061299f565b6003546040516354f8177f60e11b81526001600160a01b039091169063a9f02efe90610a349085908b906004016128e1565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a849190810190612032565b610aa05760405162461bcd60e51b81526004016104e1906129df565b600354604051631af327bd60e01b815260009182916001600160a01b0390911690631af327bd90610ad79087908d906004016128e1565b604080518083038186803b158015610aee57600080fd5b505afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b26919081019061210b565b915091506000610b378360016115dd565b600480546040516340c10f1960e01b81529293506001600160a01b0316916340c10f1991610b69918a918691016128e1565b600060405180830381600087803b158015610b8357600080fd5b505af1158015610b97573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b03167f30873c596f54a2e2e09894670d7e1a48b2433c00204f81fbedf557353c36e7c7838886604051610be293929190612b2b565b60405180910390a35050600180555050505050505050565b6006546001600160a01b031690565b6005546001600160a01b031690565b6003546001600160a01b0316158015610c3a57506004546001600160a01b0316155b610c565760405162461bcd60e51b81526004016104e190612a1f565b6001600160a01b038316610c7c5760405162461bcd60e51b81526004016104e1906129cf565b6001600160a01b038216610ca25760405162461bcd60e51b81526004016104e190612a3f565b610caa611772565b610cb261156a565b600380546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015610cf057610cf06117f1565b604080518082019091526003808252620312e360ec1b602090920191825261066e91600291611c60565b6003546001600160a01b031690565b610d31611570565b610d3a8161187b565b50565b6000610d47610d5a565b600260015561040e848484600080610d7e565b600154600114610d7c5760405162461bcd60e51b81526004016104e190612a9f565b565b60006001600160a01b038416610da65760405162461bcd60e51b81526004016104e19061296f565b60008511610dc65760405162461bcd60e51b81526004016104e190612a5f565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a8790610df6908990600401612818565b60206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e469190810190612032565b610e625760405162461bcd60e51b81526004016104e19061299f565b6000838015610e6f575082155b610e795733610e7b565b845b90506000610e8a8783876118fc565b600354604051635ac9946160e01b815291925060009182916001600160a01b031690635ac9946190610ec2908d9087906004016128e1565b604080518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f11919081019061210b565b60035460405163c7bbc86560e01b81529294509092506001600160a01b03169063c7bbc86590610f47908d9086906004016128e1565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f979190810190612032565b610fb35760405162461bcd60e51b81526004016104e19061295f565b60048054604051632770a7eb60e21b81526001600160a01b0390911691639dc29fac91610fe49188918691016128e1565b600060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b505050508680156110205750855b156112005760035460405163f44c7c8f60e01b81526000916001600160a01b03169063f44c7c8f90611056908e90600401612818565b60206040518083038186803b15801561106e57600080fd5b505afa158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110a69190810190611df5565b90506001600160a01b0381166110ce5760405162461bcd60e51b81526004016104e190612a0f565b60405163095ea7b360e01b81526001600160a01b038c169063095ea7b3906110fc90849087906004016128e1565b602060405180830381600087803b15801561111657600080fd5b505af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061114e9190810190612032565b50604080516020810182526000815290516303f2e9b160e51b81526001600160a01b03831691637e5d36209161118c918f9188918f916004016128fc565b602060405180830381600087803b1580156111a657600080fd5b505af11580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111de9190810190612032565b6111fa5760405162461bcd60e51b81526004016104e190612a4f565b5061121a565b61121a6001600160a01b038b16898463ffffffff611a4f16565b876001600160a01b0316846001600160a01b03167fa0dde38365e7863fcda1e12536206bc5ab0b7074a66a441e866145cf3d07fc248b8d8660405161126193929190612b2b565b60405180910390a39998505050505050505050565b60006001600160a01b03821661129e5760405162461bcd60e51b81526004016104e19061296f565b600083116112be5760405162461bcd60e51b81526004016104e1906129af565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a87906112ee908790600401612818565b60206040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133e9190810190612032565b61135a5760405162461bcd60e51b81526004016104e19061299f565b6003546040516354f8177f60e11b81526001600160a01b039091169063a9f02efe9061138c90879087906004016128e1565b60206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113dc9190810190612032565b6113f85760405162461bcd60e51b81526004016104e19061295f565b600354604051631af327bd60e01b815260009182916001600160a01b0390911690631af327bd9061142f90899089906004016128e1565b604080518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147e919081019061210b565b909250905061149e6001600160a01b03871633308463ffffffff611aad16565b60006114ab8360006115dd565b600480546040516340c10f1960e01b81529293506001600160a01b0316916340c10f19916114dd9189918691016128e1565b600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b03167f30873c596f54a2e2e09894670d7e1a48b2433c00204f81fbedf557353c36e7c7838a8660405161155693929190612b2b565b60405180910390a3925050505b9392505050565b60018055565b6115786106d5565b610d7c5760405162461bcd60e51b81526004016104e190612abf565b3390565b600080828060200190516115af9190810190611df5565b90506001600160a01b0381166115d75760405162461bcd60e51b81526004016104e190612a8f565b92915050565b600080821561166d576006546040516332627ddd60e11b81526001600160a01b03909116906364c4fbba90611616908790600401612aef565b60206040518083038186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116669190810190612085565b90506116f0565b60065460405163247d284b60e01b81526001600160a01b039091169063247d284b9061169d908790600401612aef565b60206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ed9190810190612085565b90505b611700848263ffffffff611ad116565b600480546005546040516340c10f1960e01b81529395506001600160a01b03918216936340c10f199361173993909216918691016128e1565b600060405180830381600087803b15801561175357600080fd5b505af1158015611767573d6000803e3d6000fd5b505050505092915050565b6000546001600160a01b03161561179b5760405162461bcd60e51b81526004016104e190612a1f565b60006117a5611594565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b604051731820a4b7618bde71dce8cdc73aab6c95905fad249081906329965a1d90309061181d9061280d565b6040519081900381206001600160e01b031960e085901b168252611846929130906004016128b9565b600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b5050505050565b6001600160a01b0381166118a15760405162461bcd60e51b81526004016104e19061297f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080821561198c57600654604051630fb9eae160e21b81526001600160a01b0390911690633ee7ab8490611935908890600401612aef565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119859190810190612085565b9050611a0f565b6006546040516307f0c60160e41b81526001600160a01b0390911690637f0c6010906119bc908890600401612aef565b60206040518083038186803b1580156119d457600080fd5b505afa1580156119e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a0c9190810190612085565b90505b611a1f858263ffffffff611ad116565b600554600454919350611a47916001600160a01b03908116918791168463ffffffff611aad16565b509392505050565b604051611aa890849063a9059cbb60e01b90611a7190869086906024016128e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b13565b505050565b60405161066e9085906323b872dd60e01b90611a7190879087908790602401612891565b600061156383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bf8565b611b25826001600160a01b0316611c24565b611b415760405162461bcd60e51b81526004016104e190612acf565b60006060836001600160a01b031683604051611b5d91906127f5565b6000604051808303816000865af19150503d8060008114611b9a576040519150601f19603f3d011682016040523d82523d6000602084013e611b9f565b606091505b509150915081611bc15760405162461bcd60e51b81526004016104e1906129ef565b80511561066e5780806020019051611bdc9190810190612032565b61066e5760405162461bcd60e51b81526004016104e190612a7f565b60008184841115611c1c5760405162461bcd60e51b81526004016104e1919061294e565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611c5857508115155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ca157805160ff1916838001178555611cce565b82800160010185558215611cce579182015b82811115611cce578251825591602001919060010190611cb3565b50611cda929150611cde565b5090565b6103a091905b80821115611cda5760008155600101611ce4565b80356115d781612c04565b80516115d781612c04565b80356115d781612c18565b80516115d781612c18565b60008083601f840112611d3657600080fd5b50813567ffffffffffffffff811115611d4e57600080fd5b602083019150836001820283011115611d6657600080fd5b9250929050565b600082601f830112611d7e57600080fd5b8151611d91611d8c82612b60565b612b39565b91508082526020830160208301858383011115611dad57600080fd5b611db8838284612bce565b50505092915050565b80356115d781612c21565b80516115d781612c21565b600060208284031215611de957600080fd5b6000611c588484611cf8565b600060208284031215611e0757600080fd5b6000611c588484611d03565b60008060008060808587031215611e2957600080fd5b6000611e358787611cf8565b9450506020611e4687828801611cf8565b9350506040611e5787828801611cf8565b9250506060611e6887828801611cf8565b91505092959194509250565b60008060008060008060008060c0898b031215611e9057600080fd5b6000611e9c8b8b611cf8565b9850506020611ead8b828c01611cf8565b9750506040611ebe8b828c01611cf8565b9650506060611ecf8b828c01611dc1565b955050608089013567ffffffffffffffff811115611eec57600080fd5b611ef88b828c01611d24565b945094505060a089013567ffffffffffffffff811115611f1757600080fd5b611f238b828c01611d24565b92509250509295985092959890939650565b600080600060608486031215611f4a57600080fd5b6000611f568686611cf8565b9350506020611f6786828701611cf8565b9250506040611f7886828701611d0e565b9150509250925092565b60008060408385031215611f9557600080fd5b6000611fa18585611cf8565b9250506020611fb285828601611dc1565b9150509250929050565b600080600060608486031215611fd157600080fd5b6000611fdd8686611cf8565b9350506020611fee86828701611dc1565b9250506040611f7886828701611cf8565b6000806000806080858703121561201557600080fd5b60006120218787611cf8565b9450506020611e4687828801611dc1565b60006020828403121561204457600080fd5b6000611c588484611d19565b60006020828403121561206257600080fd5b815167ffffffffffffffff81111561207957600080fd5b611c5884828501611d6d565b60006020828403121561209757600080fd5b6000611c588484611dcc565b600080600080606085870312156120b957600080fd5b60006120c58787611dc1565b94505060206120d687828801611cf8565b935050604085013567ffffffffffffffff8111156120f357600080fd5b6120ff87828801611d24565b95989497509550505050565b6000806040838503121561211e57600080fd5b600061212a8585611dcc565b9250506020611fb285828601611dcc565b61214481612ba6565b82525050565b61214481612bb1565b612144816103a0565b60006121688385612b98565b9350612175838584612bc2565b61217e83612bfa565b9093019392505050565b600061219382612b94565b61219d8185612b98565b93506121ad818560208601612bce565b61217e81612bfa565b60006121c182612b94565b6121cb8185612ba1565b93506121db818560208601612bce565b9290920192915050565b600081546001811660008114612202576001811461222557612264565b607f60028304166122138187612ba1565b60ff1984168152955085019250612264565b600282046122338187612ba1565b955061223e85612b88565b60005b8281101561225d57815488820152600190910190602001612241565b5050850192505b505092915050565b6000612279600e83612b98565b6d1a5b9d985b1a590818985cdad95d60921b815260200192915050565b60006122a3601983612b98565b7f6d75737420626520612076616c696420726563697069656e7400000000000000815260200192915050565b60006122dc603383612b98565b7f496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220815272697320746865207a65726f206164647265737360681b602082015260400192915050565b6000612331601183612b98565b7077726f6e672076657273696f6e2028322960781b815260200192915050565b600061235e600e83612b98565b6d1a5b9d985b1a590818985cdcd95d60921b815260200192915050565b6000612388601683612b98565b7507175616e74697479206d757374206e6f7420626520360541b815260200192915050565b60006123ba601283612b98565b710616d6f756e74206d757374206265203e20360741b815260200192915050565b60006123e8601683612b98565b7534b73b30b634b2103130b9b5b2ba1036b0b730b3b2b960511b815260200192915050565b600061241a601583612b98565b746261736b6574206f7574206f662062616c616e636560581b815260200192915050565b600061244b602083612b98565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b6000612484601483612b98565b731bdb9b1e48189c9a5919d9481b585e4818d85b1b60621b815260200192915050565b60006124b4600e83612b98565b6d696e76616c69642062726964676560901b815260200192915050565b60006124de601383612b98565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b600061250d601583612b98565b74696e76616c6964207661756c74206164647265737360581b815260200192915050565b600061253e600d83612b98565b6c34b73b30b634b2103a37b5b2b760991b815260200192915050565b6000612567601583612b98565b7418d85b1b081d1bc8189c9a5919d94819985a5b1959605a1b815260200192915050565b6000612598601583612ba1565b74115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b815260150192915050565b60006125c9602683612b98565b7f6d6173736574207175616e74697479206d75737420626520677265617465722081526507468616e20360d41b602082015260400192915050565b6000612611601183612b98565b7077726f6e672076657273696f6e2028312960781b815260200192915050565b600061263e602a83612b98565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061268a602383612b98565b7f436f6e7665727465723a204572726f72206465636f64696e672065787472614481526261746160e81b602082015260400192915050565b60006126cf601f83612b98565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815260200192915050565b6000612708601883612b98565b7f6d7573742062652063616c6c6564206279206272696467650000000000000000815260200192915050565b6000612741602d83612b98565b7f496e697469616c697a61626c654f776e61626c653a2063616c6c65722069732081526c3737ba103a34329037bbb732b960991b602082015260400192915050565b6000612790601f83612b98565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006127c9601c83612b98565b7f696e76616c69642066656573206d616e61676572206164647265737300000000815260200192915050565b600061156382846121b6565b600061156382846121e5565b60006115d78261258b565b602081016115d7828461213b565b60c08101612834828b61213b565b612841602083018a61213b565b61284e604083018961213b565b61285b6060830188612153565b818103608083015261286e81868861215c565b905081810360a083015261288381848661215c565b9a9950505050505050505050565b6060810161289f828661213b565b6128ac602083018561213b565b611c586040830184612153565b606081016128c7828661213b565b6128d46020830185612153565b611c58604083018461213b565b604081016128ef828561213b565b6115636020830184612153565b6080810161290a828761213b565b6129176020830186612153565b612924604083018561213b565b81810360608301526129368184612188565b9695505050505050565b602081016115d7828461214a565b602080825281016115638184612188565b602080825281016115d78161226c565b602080825281016115d781612296565b602080825281016115d7816122cf565b602080825281016115d781612324565b602080825281016115d781612351565b602080825281016115d78161237b565b602080825281016115d7816123ad565b602080825281016115d7816123db565b602080825281016115d78161240d565b602080825281016115d78161243e565b602080825281016115d781612477565b602080825281016115d7816124a7565b602080825281016115d7816124d1565b602080825281016115d781612500565b602080825281016115d781612531565b602080825281016115d78161255a565b602080825281016115d7816125bc565b602080825281016115d781612604565b602080825281016115d781612631565b602080825281016115d78161267d565b602080825281016115d7816126c2565b602080825281016115d7816126fb565b602080825281016115d781612734565b602080825281016115d781612783565b602080825281016115d7816127bc565b602081016115d78284612153565b60608101612b0b8287612153565b612b18602083018661213b565b818103604083015261293681848661215c565b6060810161289f8286612153565b60405181810167ffffffffffffffff81118282101715612b5857600080fd5b604052919050565b600067ffffffffffffffff821115612b7757600080fd5b506020601f91909101601f19160190565b60009081526020902090565b5190565b90815260200190565b919050565b60006115d782612bb6565b151590565b6001600160a01b031690565b82818337506000910152565b60005b83811015612be9578181015183820152602001612bd1565b8381111561066e5750506000910152565b601f01601f191690565b612c0d81612ba6565b8114610d3a57600080fd5b612c0d81612bb1565b612c0d816103a056fea365627a7a723158209261170d79f8cfa9744f3299eb45342db357b1932c4cbf350343da09adf720936c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012b5760003560e01c80638f32d59b116100ad578063d99c5c5711610071578063d99c5c571461024a578063e4bbb5a814610252578063eeea5d3614610265578063f2fde38b1461026d578063fb2c9223146102805761012b565b80638f32d59b146101f4578063960015a214610209578063b73b66881461021c578063c4a586371461022f578063c762819b146102425761012b565b806340c10f19116100f457806340c10f19146101ab578063438b1b4b146101be5780635337c03a146101d1578063715018a6146101e45780638da5cb5b146101ec5761012b565b806223de29146101305780630b8aad07146101455780630d8e6e2c1461016e5780631e9a69501461018357806321df0da714610196575b600080fd5b61014361013e366004611e74565b610293565b005b610158610153366004611fff565b6102e2565b6040516101659190612aef565b60405180910390f35b61017661030f565b604051610165919061294e565b610158610191366004611f82565b6103a3565b61019e6103cb565b6040516101659190612818565b6101586101b9366004611f82565b6103da565b6101586101cc366004611fbc565b6103f4565b6101436101df366004611e13565b61041a565b610143610674565b61019e6106c6565b6101fc6106d5565b6040516101659190612940565b610158610217366004611fbc565b6106f9565b61015861022a366004611fbc565b610719565b61014361023d3660046120a3565b610808565b61019e610bfa565b61019e610c09565b610143610260366004611f35565b610c18565b61019e610d1a565b61014361027b366004611dd7565b610d29565b61015861028e366004611fbc565b610d3d565b7fa693010e29186da1ce1e8a9fdf6619831117e41c17cbb8927787b66b35627be688888888888888886040516102d0989796959493929190612826565b60405180910390a15050505050505050565b60006102ec610d5a565b6002600181905550610302858585600180610d7e565b6001805595945050505050565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103985780601f1061036d57610100808354040283529160200191610398565b820191906000526020600020905b81548152906001019060200180831161037b57829003601f168201915b505050505090505b90565b60006103ad610d5a565b60026001556103c0838333600080610d7e565b600180559392505050565b6004546001600160a01b031690565b60006103e4610d5a565b60026001556103c0838333611276565b60006103fe610d5a565b600260015561040e848484611276565b60018055949350505050565b60408051808201825260038152620312e360ec1b602090910152517fe6bbd6277e1bf288eed5e8d1780f9a50b239e86b153736bceebccf4ea79d90b39061046390600290612801565b604051809103902014806104c5575060408051808201825260038152620322e360ec1b602090910152517f88f72b566ae0c96f6fffac4bc8ac74909f61512ac0c06a8124d5ed420d306f90906104bb90600290612801565b6040518091039020145b6104ea5760405162461bcd60e51b81526004016104e190612a6f565b60405180910390fd5b604051806040016040528060038152602001620332e360ec1b81525080519060200120846001600160a01b0316630d8e6e2c6040518163ffffffff1660e01b815260040160006040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105829190810190612050565b80519060200120146105a65760405162461bcd60e51b81526004016104e19061298f565b6001600160a01b0382166105cc5760405162461bcd60e51b81526004016104e190612a2f565b6001600160a01b0381166105f25760405162461bcd60e51b81526004016104e190612adf565b600580546001600160a01b038085166001600160a01b0319928316179092556006805484841690831617905560038054878416908316178155600480549387169390921692909217905560408051808201909152818152620332e360ec1b60209091019081526106659160029190611c60565b5061066e61156a565b50505050565b61067c611570565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b03166106ea611594565b6001600160a01b031614905090565b6000610703610d5a565b600260018190555061040e848484600180610d7e565b6000610723610d5a565b600260015560035460405163f44c7c8f60e01b81526000916001600160a01b03169063f44c7c8f90610759908890600401612818565b60206040518083038186803b15801561077157600080fd5b505afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107a99190810190611df5565b90506001600160a01b0381166107d15760405162461bcd60e51b81526004016104e190612a0f565b6001600160a01b03811633146107f95760405162461bcd60e51b81526004016104e190612aaf565b61030285858560016000610d7e565b610810610d5a565b600260015560405133907fc00ef8ea79854d25cda161b949dfe54da4ddf385ef9cf6faaab7c6f9e8d9b3ac9061084d908790879087908790612afd565b60405180910390a2600084116108755760405162461bcd60e51b81526004016104e1906129bf565b60006108b683838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061159892505050565b60035460405163f44c7c8f60e01b815291925085916000916001600160a01b03169063f44c7c8f906108ec908590600401612818565b60206040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061093c9190810190611df5565b9050336001600160a01b038216146109665760405162461bcd60e51b81526004016104e1906129ff565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a8790610996908590600401612818565b60206040518083038186803b1580156109ae57600080fd5b505afa1580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109e69190810190612032565b610a025760405162461bcd60e51b81526004016104e19061299f565b6003546040516354f8177f60e11b81526001600160a01b039091169063a9f02efe90610a349085908b906004016128e1565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a849190810190612032565b610aa05760405162461bcd60e51b81526004016104e1906129df565b600354604051631af327bd60e01b815260009182916001600160a01b0390911690631af327bd90610ad79087908d906004016128e1565b604080518083038186803b158015610aee57600080fd5b505afa158015610b02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b26919081019061210b565b915091506000610b378360016115dd565b600480546040516340c10f1960e01b81529293506001600160a01b0316916340c10f1991610b69918a918691016128e1565b600060405180830381600087803b158015610b8357600080fd5b505af1158015610b97573d6000803e3d6000fd5b50505050856001600160a01b0316336001600160a01b03167f30873c596f54a2e2e09894670d7e1a48b2433c00204f81fbedf557353c36e7c7838886604051610be293929190612b2b565b60405180910390a35050600180555050505050505050565b6006546001600160a01b031690565b6005546001600160a01b031690565b6003546001600160a01b0316158015610c3a57506004546001600160a01b0316155b610c565760405162461bcd60e51b81526004016104e190612a1f565b6001600160a01b038316610c7c5760405162461bcd60e51b81526004016104e1906129cf565b6001600160a01b038216610ca25760405162461bcd60e51b81526004016104e190612a3f565b610caa611772565b610cb261156a565b600380546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015610cf057610cf06117f1565b604080518082019091526003808252620312e360ec1b602090920191825261066e91600291611c60565b6003546001600160a01b031690565b610d31611570565b610d3a8161187b565b50565b6000610d47610d5a565b600260015561040e848484600080610d7e565b600154600114610d7c5760405162461bcd60e51b81526004016104e190612a9f565b565b60006001600160a01b038416610da65760405162461bcd60e51b81526004016104e19061296f565b60008511610dc65760405162461bcd60e51b81526004016104e190612a5f565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a8790610df6908990600401612818565b60206040518083038186803b158015610e0e57600080fd5b505afa158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e469190810190612032565b610e625760405162461bcd60e51b81526004016104e19061299f565b6000838015610e6f575082155b610e795733610e7b565b845b90506000610e8a8783876118fc565b600354604051635ac9946160e01b815291925060009182916001600160a01b031690635ac9946190610ec2908d9087906004016128e1565b604080518083038186803b158015610ed957600080fd5b505afa158015610eed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f11919081019061210b565b60035460405163c7bbc86560e01b81529294509092506001600160a01b03169063c7bbc86590610f47908d9086906004016128e1565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f979190810190612032565b610fb35760405162461bcd60e51b81526004016104e19061295f565b60048054604051632770a7eb60e21b81526001600160a01b0390911691639dc29fac91610fe49188918691016128e1565b600060405180830381600087803b158015610ffe57600080fd5b505af1158015611012573d6000803e3d6000fd5b505050508680156110205750855b156112005760035460405163f44c7c8f60e01b81526000916001600160a01b03169063f44c7c8f90611056908e90600401612818565b60206040518083038186803b15801561106e57600080fd5b505afa158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110a69190810190611df5565b90506001600160a01b0381166110ce5760405162461bcd60e51b81526004016104e190612a0f565b60405163095ea7b360e01b81526001600160a01b038c169063095ea7b3906110fc90849087906004016128e1565b602060405180830381600087803b15801561111657600080fd5b505af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061114e9190810190612032565b50604080516020810182526000815290516303f2e9b160e51b81526001600160a01b03831691637e5d36209161118c918f9188918f916004016128fc565b602060405180830381600087803b1580156111a657600080fd5b505af11580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111de9190810190612032565b6111fa5760405162461bcd60e51b81526004016104e190612a4f565b5061121a565b61121a6001600160a01b038b16898463ffffffff611a4f16565b876001600160a01b0316846001600160a01b03167fa0dde38365e7863fcda1e12536206bc5ab0b7074a66a441e866145cf3d07fc248b8d8660405161126193929190612b2b565b60405180910390a39998505050505050505050565b60006001600160a01b03821661129e5760405162461bcd60e51b81526004016104e19061296f565b600083116112be5760405162461bcd60e51b81526004016104e1906129af565b60035460405163d80f5a8760e01b81526001600160a01b039091169063d80f5a87906112ee908790600401612818565b60206040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061133e9190810190612032565b61135a5760405162461bcd60e51b81526004016104e19061299f565b6003546040516354f8177f60e11b81526001600160a01b039091169063a9f02efe9061138c90879087906004016128e1565b60206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113dc9190810190612032565b6113f85760405162461bcd60e51b81526004016104e19061295f565b600354604051631af327bd60e01b815260009182916001600160a01b0390911690631af327bd9061142f90899089906004016128e1565b604080518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147e919081019061210b565b909250905061149e6001600160a01b03871633308463ffffffff611aad16565b60006114ab8360006115dd565b600480546040516340c10f1960e01b81529293506001600160a01b0316916340c10f19916114dd9189918691016128e1565b600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b03167f30873c596f54a2e2e09894670d7e1a48b2433c00204f81fbedf557353c36e7c7838a8660405161155693929190612b2b565b60405180910390a3925050505b9392505050565b60018055565b6115786106d5565b610d7c5760405162461bcd60e51b81526004016104e190612abf565b3390565b600080828060200190516115af9190810190611df5565b90506001600160a01b0381166115d75760405162461bcd60e51b81526004016104e190612a8f565b92915050565b600080821561166d576006546040516332627ddd60e11b81526001600160a01b03909116906364c4fbba90611616908790600401612aef565b60206040518083038186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116669190810190612085565b90506116f0565b60065460405163247d284b60e01b81526001600160a01b039091169063247d284b9061169d908790600401612aef565b60206040518083038186803b1580156116b557600080fd5b505afa1580156116c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ed9190810190612085565b90505b611700848263ffffffff611ad116565b600480546005546040516340c10f1960e01b81529395506001600160a01b03918216936340c10f199361173993909216918691016128e1565b600060405180830381600087803b15801561175357600080fd5b505af1158015611767573d6000803e3d6000fd5b505050505092915050565b6000546001600160a01b03161561179b5760405162461bcd60e51b81526004016104e190612a1f565b60006117a5611594565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b604051731820a4b7618bde71dce8cdc73aab6c95905fad249081906329965a1d90309061181d9061280d565b6040519081900381206001600160e01b031960e085901b168252611846929130906004016128b9565b600060405180830381600087803b15801561186057600080fd5b505af1158015611874573d6000803e3d6000fd5b5050505050565b6001600160a01b0381166118a15760405162461bcd60e51b81526004016104e19061297f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080821561198c57600654604051630fb9eae160e21b81526001600160a01b0390911690633ee7ab8490611935908890600401612aef565b60206040518083038186803b15801561194d57600080fd5b505afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119859190810190612085565b9050611a0f565b6006546040516307f0c60160e41b81526001600160a01b0390911690637f0c6010906119bc908890600401612aef565b60206040518083038186803b1580156119d457600080fd5b505afa1580156119e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a0c9190810190612085565b90505b611a1f858263ffffffff611ad116565b600554600454919350611a47916001600160a01b03908116918791168463ffffffff611aad16565b509392505050565b604051611aa890849063a9059cbb60e01b90611a7190869086906024016128e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b13565b505050565b60405161066e9085906323b872dd60e01b90611a7190879087908790602401612891565b600061156383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bf8565b611b25826001600160a01b0316611c24565b611b415760405162461bcd60e51b81526004016104e190612acf565b60006060836001600160a01b031683604051611b5d91906127f5565b6000604051808303816000865af19150503d8060008114611b9a576040519150601f19603f3d011682016040523d82523d6000602084013e611b9f565b606091505b509150915081611bc15760405162461bcd60e51b81526004016104e1906129ef565b80511561066e5780806020019051611bdc9190810190612032565b61066e5760405162461bcd60e51b81526004016104e190612a7f565b60008184841115611c1c5760405162461bcd60e51b81526004016104e1919061294e565b505050900390565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611c5857508115155b949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ca157805160ff1916838001178555611cce565b82800160010185558215611cce579182015b82811115611cce578251825591602001919060010190611cb3565b50611cda929150611cde565b5090565b6103a091905b80821115611cda5760008155600101611ce4565b80356115d781612c04565b80516115d781612c04565b80356115d781612c18565b80516115d781612c18565b60008083601f840112611d3657600080fd5b50813567ffffffffffffffff811115611d4e57600080fd5b602083019150836001820283011115611d6657600080fd5b9250929050565b600082601f830112611d7e57600080fd5b8151611d91611d8c82612b60565b612b39565b91508082526020830160208301858383011115611dad57600080fd5b611db8838284612bce565b50505092915050565b80356115d781612c21565b80516115d781612c21565b600060208284031215611de957600080fd5b6000611c588484611cf8565b600060208284031215611e0757600080fd5b6000611c588484611d03565b60008060008060808587031215611e2957600080fd5b6000611e358787611cf8565b9450506020611e4687828801611cf8565b9350506040611e5787828801611cf8565b9250506060611e6887828801611cf8565b91505092959194509250565b60008060008060008060008060c0898b031215611e9057600080fd5b6000611e9c8b8b611cf8565b9850506020611ead8b828c01611cf8565b9750506040611ebe8b828c01611cf8565b9650506060611ecf8b828c01611dc1565b955050608089013567ffffffffffffffff811115611eec57600080fd5b611ef88b828c01611d24565b945094505060a089013567ffffffffffffffff811115611f1757600080fd5b611f238b828c01611d24565b92509250509295985092959890939650565b600080600060608486031215611f4a57600080fd5b6000611f568686611cf8565b9350506020611f6786828701611cf8565b9250506040611f7886828701611d0e565b9150509250925092565b60008060408385031215611f9557600080fd5b6000611fa18585611cf8565b9250506020611fb285828601611dc1565b9150509250929050565b600080600060608486031215611fd157600080fd5b6000611fdd8686611cf8565b9350506020611fee86828701611dc1565b9250506040611f7886828701611cf8565b6000806000806080858703121561201557600080fd5b60006120218787611cf8565b9450506020611e4687828801611dc1565b60006020828403121561204457600080fd5b6000611c588484611d19565b60006020828403121561206257600080fd5b815167ffffffffffffffff81111561207957600080fd5b611c5884828501611d6d565b60006020828403121561209757600080fd5b6000611c588484611dcc565b600080600080606085870312156120b957600080fd5b60006120c58787611dc1565b94505060206120d687828801611cf8565b935050604085013567ffffffffffffffff8111156120f357600080fd5b6120ff87828801611d24565b95989497509550505050565b6000806040838503121561211e57600080fd5b600061212a8585611dcc565b9250506020611fb285828601611dcc565b61214481612ba6565b82525050565b61214481612bb1565b612144816103a0565b60006121688385612b98565b9350612175838584612bc2565b61217e83612bfa565b9093019392505050565b600061219382612b94565b61219d8185612b98565b93506121ad818560208601612bce565b61217e81612bfa565b60006121c182612b94565b6121cb8185612ba1565b93506121db818560208601612bce565b9290920192915050565b600081546001811660008114612202576001811461222557612264565b607f60028304166122138187612ba1565b60ff1984168152955085019250612264565b600282046122338187612ba1565b955061223e85612b88565b60005b8281101561225d57815488820152600190910190602001612241565b5050850192505b505092915050565b6000612279600e83612b98565b6d1a5b9d985b1a590818985cdad95d60921b815260200192915050565b60006122a3601983612b98565b7f6d75737420626520612076616c696420726563697069656e7400000000000000815260200192915050565b60006122dc603383612b98565b7f496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220815272697320746865207a65726f206164647265737360681b602082015260400192915050565b6000612331601183612b98565b7077726f6e672076657273696f6e2028322960781b815260200192915050565b600061235e600e83612b98565b6d1a5b9d985b1a590818985cdcd95d60921b815260200192915050565b6000612388601683612b98565b7507175616e74697479206d757374206e6f7420626520360541b815260200192915050565b60006123ba601283612b98565b710616d6f756e74206d757374206265203e20360741b815260200192915050565b60006123e8601683612b98565b7534b73b30b634b2103130b9b5b2ba1036b0b730b3b2b960511b815260200192915050565b600061241a601583612b98565b746261736b6574206f7574206f662062616c616e636560581b815260200192915050565b600061244b602083612b98565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815260200192915050565b6000612484601483612b98565b731bdb9b1e48189c9a5919d9481b585e4818d85b1b60621b815260200192915050565b60006124b4600e83612b98565b6d696e76616c69642062726964676560901b815260200192915050565b60006124de601383612b98565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b600061250d601583612b98565b74696e76616c6964207661756c74206164647265737360581b815260200192915050565b600061253e600d83612b98565b6c34b73b30b634b2103a37b5b2b760991b815260200192915050565b6000612567601583612b98565b7418d85b1b081d1bc8189c9a5919d94819985a5b1959605a1b815260200192915050565b6000612598601583612ba1565b74115490cdcdcdd51bdad95b9cd49958da5c1a595b9d605a1b815260150192915050565b60006125c9602683612b98565b7f6d6173736574207175616e74697479206d75737420626520677265617465722081526507468616e20360d41b602082015260400192915050565b6000612611601183612b98565b7077726f6e672076657273696f6e2028312960781b815260200192915050565b600061263e602a83612b98565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061268a602383612b98565b7f436f6e7665727465723a204572726f72206465636f64696e672065787472614481526261746160e81b602082015260400192915050565b60006126cf601f83612b98565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815260200192915050565b6000612708601883612b98565b7f6d7573742062652063616c6c6564206279206272696467650000000000000000815260200192915050565b6000612741602d83612b98565b7f496e697469616c697a61626c654f776e61626c653a2063616c6c65722069732081526c3737ba103a34329037bbb732b960991b602082015260400192915050565b6000612790601f83612b98565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400815260200192915050565b60006127c9601c83612b98565b7f696e76616c69642066656573206d616e61676572206164647265737300000000815260200192915050565b600061156382846121b6565b600061156382846121e5565b60006115d78261258b565b602081016115d7828461213b565b60c08101612834828b61213b565b612841602083018a61213b565b61284e604083018961213b565b61285b6060830188612153565b818103608083015261286e81868861215c565b905081810360a083015261288381848661215c565b9a9950505050505050505050565b6060810161289f828661213b565b6128ac602083018561213b565b611c586040830184612153565b606081016128c7828661213b565b6128d46020830185612153565b611c58604083018461213b565b604081016128ef828561213b565b6115636020830184612153565b6080810161290a828761213b565b6129176020830186612153565b612924604083018561213b565b81810360608301526129368184612188565b9695505050505050565b602081016115d7828461214a565b602080825281016115638184612188565b602080825281016115d78161226c565b602080825281016115d781612296565b602080825281016115d7816122cf565b602080825281016115d781612324565b602080825281016115d781612351565b602080825281016115d78161237b565b602080825281016115d7816123ad565b602080825281016115d7816123db565b602080825281016115d78161240d565b602080825281016115d78161243e565b602080825281016115d781612477565b602080825281016115d7816124a7565b602080825281016115d7816124d1565b602080825281016115d781612500565b602080825281016115d781612531565b602080825281016115d78161255a565b602080825281016115d7816125bc565b602080825281016115d781612604565b602080825281016115d781612631565b602080825281016115d78161267d565b602080825281016115d7816126c2565b602080825281016115d7816126fb565b602080825281016115d781612734565b602080825281016115d781612783565b602080825281016115d7816127bc565b602081016115d78284612153565b60608101612b0b8287612153565b612b18602083018661213b565b818103604083015261293681848661215c565b6060810161289f8286612153565b60405181810167ffffffffffffffff81118282101715612b5857600080fd5b604052919050565b600067ffffffffffffffff821115612b7757600080fd5b506020601f91909101601f19160190565b60009081526020902090565b5190565b90815260200190565b919050565b60006115d782612bb6565b151590565b6001600160a01b031690565b82818337506000910152565b60005b83811015612be9578181015183820152602001612bd1565b8381111561066e5750506000910152565b601f01601f191690565b612c0d81612ba6565b8114610d3a57600080fd5b612c0d81612bb1565b612c0d816103a056fea365627a7a723158209261170d79f8cfa9744f3299eb45342db357b1932c4cbf350343da09adf720936c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "details": "Contract is responsible for managing mAsset and bAsset. Used for minting and burning tokens, calculating fees and calling the bridge if transaction based on token from another blockchain.",
    "methods": {
      "initialize(address,address,bool)": {
        "details": "Contract initializer.",
        "params": {
          "_basketManagerAddress": "Address of the basket manager.",
          "_registerAsERC777RecipientFlag": "Bool determine if contract should be register as ERC777 recipient.",
          "_tokenAddress": "Address of the mAsset token."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "mint(address,uint256)": {
        "details": "Mint a single mAsset, at a 1:1 ratio with the bAsset. This contract     must have approval to spend the senders bAsset.",
        "params": {
          "_bAsset": "Address of the bAsset.",
          "_bAssetQuantity": "Quantity in bAsset units."
        },
        "return": "massetMinted   Number of newly minted mAssets."
      },
      "mintTo(address,uint256,address)": {
        "details": "Mint a single mAsset to recipient address, at a 1:1 ratio with the bAsset.     This contract must have approval to spend the senders bAsset.",
        "params": {
          "_bAsset": "Address of the bAsset.",
          "_bAssetQuantity": "Quantity in bAsset units.",
          "_recipient": "Receipient of the newly minted mAsset tokens."
        },
        "return": "massetMinted   Number of newly minted mAssets."
      },
      "onTokensMinted(uint256,address,bytes)": {
        "details": "This is called by the bridge to let us know the user has sent tokens through it and     into the mAsset.",
        "params": {
          "_orderAmount": "Units of the mAsset to redeem.",
          "_tokenAddress": "Address of the bAsset to redeem.",
          "_userData": "Address of the final recipient as ABI encoded bytes."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(address,uint256)": {
        "details": "Credits the sender with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.",
        "params": {
          "_bAsset": "Address of the bAsset to redeem.",
          "_massetQuantity": "Units of the masset to redeem."
        },
        "return": "massetRedeemed   Relative number of mAsset units burned to pay for the bAssets."
      },
      "redeemByBridge(address,uint256,address)": {
        "details": "Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to be called by the bridge in order to have diffrent fees.",
        "params": {
          "_basset": "Address of the bAsset to redeem.",
          "_massetQuantity": "Units of the mAsset to redeem.",
          "_recipient": "Address to credit with withdrawn bAssets."
        },
        "return": "massetMinted     Relative number of mAsset units burned to pay for the bAssets."
      },
      "redeemTo(address,uint256,address)": {
        "details": "Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.",
        "params": {
          "_bAsset": "Address of the bAsset to redeem.",
          "_massetQuantity": "Units of the masset to redeem.",
          "_recipient": "Address to credit with withdrawn bAssets."
        },
        "return": "massetRedeemed   Relative number of mAsset units burned to pay for the bAssets."
      },
      "redeemToBridge(address,uint256,address)": {
        "details": "Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to also call the bridge in order to have the basset tokens sent to     another blockchain.",
        "params": {
          "_basset": "Address of the bAsset to redeem.",
          "_massetQuantity": "Units of the mAsset to redeem.",
          "_recipient": "Address to credit with withdrawn bAssets."
        },
        "return": "massetRedeemed   Relative number of mAsset units burned to pay for the bAssets."
      },
      "redeemToBridge(address,uint256,address,address)": {
        "details": "Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the     relative mAsset quantity from the sender. Sender also incurs a small fee, if any.     This function is designed to also call the bridge in order to have the basset tokens sent to     another blockchain.",
        "params": {
          "_basset": "Address of the bAsset to redeem.",
          "_bridgeAddress": "This is ignored and is left here for backward compatibility with the FE.",
          "_massetQuantity": "Units of the mAsset to redeem.",
          "_recipient": "Address to credit with withdrawn bAssets."
        },
        "return": "massetRedeemed   Relative number of mAsset units burned to pay for the bAssets."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "This is called by the bridge to let us know tokens have been received.",
        "params": {
          "_amount": "uint256 amount of tokens to transfer.",
          "_from": "Address token holder address.",
          "_operator": "Address operator requesting the transfer.",
          "_operatorData": "Bytes extra information provided by the operator (if any).",
          "_to": "Address recipient address.",
          "_userData": "Bytes extra information provided by the token holder (if any)."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToV3(address,address,address,address)": {
        "details": "Migration to V3 version.",
        "params": {
          "_basketManagerAddress": "Address of new BasketManagerV3.",
          "_feesManagerAddress": "Adress of FeesManager contract.",
          "_feesVaultAddress": "Address of FeesVault contract.",
          "_tokenAddress": "Address of mAsset token."
        }
      }
    },
    "title": "MassetV3"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14369,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14500,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "_notEntered",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16141,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 16143,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "basketManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BasketManagerV3)15621"
      },
      {
        "astId": 16145,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "token",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Token)17158"
      },
      {
        "astId": 16147,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "feesVault",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(FeesVault)19310"
      },
      {
        "astId": 16149,
        "contract": "contracts/masset/MassetV3.sol:MassetV3",
        "label": "feesManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(FeesManager)15888"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BasketManagerV3)15621": {
        "encoding": "inplace",
        "label": "contract BasketManagerV3",
        "numberOfBytes": "20"
      },
      "t_contract(FeesManager)15888": {
        "encoding": "inplace",
        "label": "contract FeesManager",
        "numberOfBytes": "20"
      },
      "t_contract(FeesVault)19310": {
        "encoding": "inplace",
        "label": "contract FeesVault",
        "numberOfBytes": "20"
      },
      "t_contract(Token)17158": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}