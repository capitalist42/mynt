{
  "address": "0x9c8adF641E10c64245Dc01190fE8433fA08Cb81F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "DepositBridgeFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalBridgeFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFeeChanged",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_massetAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDepositBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getWithdrawalBridgeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositBridgeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalBridgeFee",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDepositBridgeFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalBridgeFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalFee",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c545897ad2cf5956a0ad2c54376d3336b4ab1abf8472729fe076757f3751159",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x9c8adF641E10c64245Dc01190fE8433fA08Cb81F",
    "transactionIndex": 0,
    "gasUsed": "782649",
    "logsBloom": "0x
    "blockHash": "0xfe099be21d1443f468e3da2585bd7662cd3b6f16e09058c4e513530df8d0e7aa",
    "transactionHash": "0x5c545897ad2cf5956a0ad2c54376d3336b4ab1abf8472729fe076757f3751159",
    "logs": [],
    "blockNumber": 3331327,
    "cumulativeGasUsed": "782649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a3e2dbf67d3233bbb3b7921dfe5a273",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositBridgeFee\",\"type\":\"uint256\"}],\"name\":\"DepositBridgeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBridgeFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBridgeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFeeChanged\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_massetAmount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositBridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalBridgeFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositBridgeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalBridgeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract is responsible for fees calculations.\",\"methods\":{\"calculateDepositBridgeFee(uint256)\":{\"details\":\"Calculate and return fee for deposit through bridge.\",\"params\":{\"_massetAmount\":\"Amount of masset to deposit.\"},\"return\":\"fee           Calculated fee amount.\"},\"calculateDepositFee(uint256)\":{\"details\":\"Calculate and return deposit fee amount based on massetAmount.\",\"params\":{\"_massetAmount\":\"Amount of masset to deposit.\"},\"return\":\"fee           Calculated fee amount.\"},\"calculateRedeemBridgeFee(uint256)\":{\"details\":\"Calculate and return fee for redeem through bridge.\",\"params\":{\"_massetAmount\":\"Amount of masset.\"},\"return\":\"fee           Calculated fee amount.\"},\"calculateRedeemFee(uint256)\":{\"details\":\"Calculate and return redeem fee amount based on massetAmount.\",\"params\":{\"_massetAmount\":\"Amount of masset.\"},\"return\":\"fee           Calculated fee amount.\"},\"initialize(uint256,uint256,uint256,uint256)\":{\"details\":\"Contract initializer.\",\"params\":{\"_depositBridgeFee\":\"Amount of deposit through bridge fee in promils.\",\"_depositFee\":\"Amount of deposit fee in promils.\",\"_withdrawalBridgeFee\":\"Amount of redeem through bridge fee in promils.\",\"_withdrawalFee\":\"Amount of redeem fee in promils.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"FeesManager\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/masset/FeesManager.sol\":\"FeesManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"contracts/helpers/InitializableOwnable.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract InitializableOwnable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _initialize() internal {\\n        require(_owner == address(0), \\\"already initialized\\\");\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    * this method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n\\n    function _onlyOwner() internal view {\\n        require(isOwner(), \\\"InitializableOwnable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"InitializableOwnable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3ed80a5e37beb6037c333fd39ffa494420a1f95569c8e283d1f9cc8c742b2361\"},\"contracts/masset/FeesManager.sol\":{\"content\":\"pragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\n\\n/**\\n * @title FeesManager\\n * @dev Contract is responsible for fees calculations.\\n */\\ncontract FeesManager is InitializableOwnable {\\n    using SafeMath for uint256;\\n\\n    // State\\n\\n    /**\\n     * @dev Factor of fees.\\n     * @notice a value of 10000 means that 223 equals 2.23% and 10000 equals 100%\\n     */\\n    uint256 constant public PRECISION = 10000;\\n\\n    uint256 private depositFee;\\n    uint256 private depositBridgeFee;\\n    uint256 private withdrawalFee;\\n    uint256 private withdrawalBridgeFee;\\n\\n    // Events\\n\\n    /**\\n     * @dev Emitted when deposit fee has changed.\\n     * @param depositFee            Amount of the fee.\\n     */\\n    event DepositFeeChanged (uint256 depositFee);\\n\\n    /**\\n     * @dev Emitted when deposit bridge fee has changed.\\n     * @param depositBridgeFee      Amount of the fee.\\n     */\\n    event DepositBridgeFeeChanged (uint256 depositBridgeFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal fee has changed.\\n     * @param withdrawalFee         Amount of the fee.\\n     */\\n    event WithdrawalFeeChanged (uint256 withdrawalFee);\\n\\n    /**\\n     * @dev Emitted when withdrawal bridge fee has changed.\\n     * @param withdrawalBridgeFee   Amount of the fee.\\n     */\\n    event WithdrawalBridgeFeeChanged (uint256 withdrawalBridgeFee);\\n\\n    // Initializer\\n\\n    /**\\n     * @dev Contract initializer.\\n     * @param _depositFee           Amount of deposit fee in promils.\\n     * @param _depositBridgeFee     Amount of deposit through bridge fee in promils.\\n     * @param _withdrawalFee        Amount of redeem fee in promils.\\n     * @param _withdrawalBridgeFee  Amount of redeem through bridge fee in promils.\\n    */\\n    function initialize(\\n        uint256 _depositFee,\\n        uint256 _depositBridgeFee,\\n        uint256 _withdrawalFee,\\n        uint256 _withdrawalBridgeFee\\n    ) external {\\n        InitializableOwnable._initialize();\\n\\n        setDepositFee(_depositFee);\\n        setDepositBridgeFee(_depositBridgeFee);\\n        setWithdrawalFee(_withdrawalFee);\\n        setWithdrawalBridgeFee(_withdrawalBridgeFee);\\n    }\\n\\n    // Internal\\n\\n    /**\\n     * @dev Calculate and return fee amount based on massetAmount and type of fee.\\n     */\\n    function _calculateFee(uint256 _massetAmount, uint256 _fee) internal pure returns(uint256) {\\n        return _massetAmount.mul(_fee).div(PRECISION);\\n    }\\n\\n    // Public\\n\\n    /**\\n     * @dev Calculate and return deposit fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, depositFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for deposit through bridge.\\n     * @param _massetAmount  Amount of masset to deposit.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateDepositBridgeFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, depositBridgeFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return redeem fee amount based on massetAmount.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, withdrawalFee);\\n    }\\n\\n    /**\\n     * @dev Calculate and return fee for redeem through bridge.\\n     * @param _massetAmount  Amount of masset.\\n     * @return fee           Calculated fee amount.\\n     */\\n    function calculateRedeemBridgeFee(uint256 _massetAmount) external view returns(uint256) {\\n        return _calculateFee(_massetAmount, withdrawalBridgeFee);\\n    }\\n\\n    // Getters\\n\\n    function getDepositFee () external view returns(uint256) {\\n        return depositFee;\\n    }\\n\\n    function getDepositBridgeFee () external view returns(uint256) {\\n        return depositBridgeFee;\\n    }\\n\\n    function getWithdrawalFee () external view returns(uint256) {\\n        return withdrawalFee;\\n    }\\n\\n    function getWithdrawalBridgeFee () external view returns(uint256) {\\n        return withdrawalBridgeFee;\\n    }\\n\\n    // Governance methods\\n\\n    function setDepositFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositFee = _amount;\\n        emit DepositFeeChanged(_amount);\\n    }\\n\\n    function setDepositBridgeFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        depositBridgeFee = _amount;\\n        emit DepositBridgeFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalFee = _amount;\\n        emit WithdrawalFeeChanged(_amount);\\n    }\\n\\n    function setWithdrawalBridgeFee (uint256 _amount) public onlyOwner {\\n        require(_amount <= PRECISION, \\\"invalid fee amount\\\");\\n\\n        withdrawalBridgeFee = _amount;\\n        emit WithdrawalBridgeFeeChanged(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36a645553be7f2a1d698fc34a71ae9610d391b96a5723808dda30a16ed766d6d\"}},\"version\":1}",
  "bytecode": "0x6080604052610aaa806100136000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c54edda011610071578063c54edda01461020d578063c8066c4114610215578063d8e159f81461021d578063ee87674314610225578063f2fde38b1461023857610116565b80638da5cb5b146101c85780638f32d59b146101dd578063aaf5eb68146101f2578063ac1e5025146101fa57610116565b806350bc5042116100e957806350bc50421461017457806360a2da441461018757806364c4fbba1461019a578063715018a6146101ad5780637f0c6010146101b557610116565b80630de705b51461011b578063247d284b146101395780633ee7ab841461014c578063490ae2101461015f575b600080fd5b61012361024b565b60405161013091906109da565b60405180910390f35b610123610147366004610741565b610251565b61012361015a366004610741565b610265565b61017261016d366004610741565b610273565b005b610172610182366004610741565b6102e6565b61017261019536600461075f565b610345565b6101236101a8366004610741565b610377565b610172610385565b6101236101c3366004610741565b6103d7565b6101d06103e5565b604051610130919061095d565b6101e56103f4565b604051610130919061096b565b610123610418565b610172610208366004610741565b61041e565b61012361047d565b610123610483565b610123610489565b610172610233366004610741565b61048f565b61017261024636600461071b565b6104ee565b60015490565b600061025f82600154610502565b92915050565b600061025f82600454610502565b61027b61052d565b6127108111156102a65760405162461bcd60e51b815260040161029d906109ba565b60405180910390fd5b60018190556040517f2a6f1084651542f3142c70f4c43c096d016a8b517c063660b146268f646ea43a906102db9083906109da565b60405180910390a150565b6102ee61052d565b6127108111156103105760405162461bcd60e51b815260040161029d906109ba565b60028190556040517f670d967e6a887c84c79a646c76703d9237c70d6f94df6e50ab680b527c264d17906102db9083906109da565b61034d610553565b61035684610273565b61035f836102e6565b6103688261041e565b6103718161048f565b50505050565b600061025f82600254610502565b61038d61052d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061025f82600354610502565b6000546001600160a01b031690565b600080546001600160a01b03166104096105d2565b6001600160a01b031614905090565b61271081565b61042661052d565b6127108111156104485760405162461bcd60e51b815260040161029d906109ba565b60038190556040517ffc1353e6b18ce07b5a979c8edf77a87455939a17a9eebbb084dcde5bfb3b19ac906102db9083906109da565b60045490565b60025490565b60035490565b61049761052d565b6127108111156104b95760405162461bcd60e51b815260040161029d906109ba565b60048190556040517f6885e5ccab44b224d100539b69688eb383fb3ccf89de3819cc5d128063e389c9906102db9083906109da565b6104f661052d565b6104ff816105d6565b50565b600061052661271061051a858563ffffffff61065716565b9063ffffffff61069116565b9392505050565b6105356103f4565b6105515760405162461bcd60e51b815260040161029d906109ca565b565b6000546001600160a01b03161561057c5760405162461bcd60e51b815260040161029d9061099a565b60006105866105d2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b3390565b6001600160a01b0381166105fc5760405162461bcd60e51b815260040161029d9061098a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826106665750600061025f565b8282028284828161067357fe5b04146105265760405162461bcd60e51b815260040161029d906109aa565b600061052683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836106ef5760405162461bcd60e51b815260040161029d9190610979565b5060008385816106fb57fe5b0495945050505050565b803561025f81610a4a565b803561025f81610a5e565b60006020828403121561072d57600080fd5b60006107398484610705565b949350505050565b60006020828403121561075357600080fd5b60006107398484610710565b6000806000806080858703121561077557600080fd5b60006107818787610710565b945050602061079287828801610710565b93505060406107a387828801610710565b92505060606107b487828801610710565b91505092959194509250565b6107c9816109f5565b82525050565b6107c981610a00565b60006107e3826109e8565b6107ed81856109ec565b93506107fd818560208601610a14565b61080681610a40565b9093019392505050565b600061081d6033836109ec565b7f496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220815272697320746865207a65726f206164647265737360681b602082015260400192915050565b60006108726013836109ec565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b60006108a16021836109ec565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006108e46012836109ec565b711a5b9d985b1a590819995948185b5bdd5b9d60721b815260200192915050565b6000610912602d836109ec565b7f496e697469616c697a61626c654f776e61626c653a2063616c6c65722069732081526c3737ba103a34329037bbb732b960991b602082015260400192915050565b6107c981610a11565b6020810161025f82846107c0565b6020810161025f82846107cf565b6020808252810161052681846107d8565b6020808252810161025f81610810565b6020808252810161025f81610865565b6020808252810161025f81610894565b6020808252810161025f816108d7565b6020808252810161025f81610905565b6020810161025f8284610954565b5190565b90815260200190565b600061025f82610a05565b151590565b6001600160a01b031690565b90565b60005b83811015610a2f578181015183820152602001610a17565b838111156103715750506000910152565b601f01601f191690565b610a53816109f5565b81146104ff57600080fd5b610a5381610a1156fea365627a7a7231582013dff15b19194a0c52927e7ccc74293c5f9835a34ac047f6fa07a7e3f1ef7f156c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c54edda011610071578063c54edda01461020d578063c8066c4114610215578063d8e159f81461021d578063ee87674314610225578063f2fde38b1461023857610116565b80638da5cb5b146101c85780638f32d59b146101dd578063aaf5eb68146101f2578063ac1e5025146101fa57610116565b806350bc5042116100e957806350bc50421461017457806360a2da441461018757806364c4fbba1461019a578063715018a6146101ad5780637f0c6010146101b557610116565b80630de705b51461011b578063247d284b146101395780633ee7ab841461014c578063490ae2101461015f575b600080fd5b61012361024b565b60405161013091906109da565b60405180910390f35b610123610147366004610741565b610251565b61012361015a366004610741565b610265565b61017261016d366004610741565b610273565b005b610172610182366004610741565b6102e6565b61017261019536600461075f565b610345565b6101236101a8366004610741565b610377565b610172610385565b6101236101c3366004610741565b6103d7565b6101d06103e5565b604051610130919061095d565b6101e56103f4565b604051610130919061096b565b610123610418565b610172610208366004610741565b61041e565b61012361047d565b610123610483565b610123610489565b610172610233366004610741565b61048f565b61017261024636600461071b565b6104ee565b60015490565b600061025f82600154610502565b92915050565b600061025f82600454610502565b61027b61052d565b6127108111156102a65760405162461bcd60e51b815260040161029d906109ba565b60405180910390fd5b60018190556040517f2a6f1084651542f3142c70f4c43c096d016a8b517c063660b146268f646ea43a906102db9083906109da565b60405180910390a150565b6102ee61052d565b6127108111156103105760405162461bcd60e51b815260040161029d906109ba565b60028190556040517f670d967e6a887c84c79a646c76703d9237c70d6f94df6e50ab680b527c264d17906102db9083906109da565b61034d610553565b61035684610273565b61035f836102e6565b6103688261041e565b6103718161048f565b50505050565b600061025f82600254610502565b61038d61052d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061025f82600354610502565b6000546001600160a01b031690565b600080546001600160a01b03166104096105d2565b6001600160a01b031614905090565b61271081565b61042661052d565b6127108111156104485760405162461bcd60e51b815260040161029d906109ba565b60038190556040517ffc1353e6b18ce07b5a979c8edf77a87455939a17a9eebbb084dcde5bfb3b19ac906102db9083906109da565b60045490565b60025490565b60035490565b61049761052d565b6127108111156104b95760405162461bcd60e51b815260040161029d906109ba565b60048190556040517f6885e5ccab44b224d100539b69688eb383fb3ccf89de3819cc5d128063e389c9906102db9083906109da565b6104f661052d565b6104ff816105d6565b50565b600061052661271061051a858563ffffffff61065716565b9063ffffffff61069116565b9392505050565b6105356103f4565b6105515760405162461bcd60e51b815260040161029d906109ca565b565b6000546001600160a01b03161561057c5760405162461bcd60e51b815260040161029d9061099a565b60006105866105d2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b3390565b6001600160a01b0381166105fc5760405162461bcd60e51b815260040161029d9061098a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000826106665750600061025f565b8282028284828161067357fe5b04146105265760405162461bcd60e51b815260040161029d906109aa565b600061052683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836106ef5760405162461bcd60e51b815260040161029d9190610979565b5060008385816106fb57fe5b0495945050505050565b803561025f81610a4a565b803561025f81610a5e565b60006020828403121561072d57600080fd5b60006107398484610705565b949350505050565b60006020828403121561075357600080fd5b60006107398484610710565b6000806000806080858703121561077557600080fd5b60006107818787610710565b945050602061079287828801610710565b93505060406107a387828801610710565b92505060606107b487828801610710565b91505092959194509250565b6107c9816109f5565b82525050565b6107c981610a00565b60006107e3826109e8565b6107ed81856109ec565b93506107fd818560208601610a14565b61080681610a40565b9093019392505050565b600061081d6033836109ec565b7f496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220815272697320746865207a65726f206164647265737360681b602082015260400192915050565b60006108726013836109ec565b72185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b815260200192915050565b60006108a16021836109ec565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006108e46012836109ec565b711a5b9d985b1a590819995948185b5bdd5b9d60721b815260200192915050565b6000610912602d836109ec565b7f496e697469616c697a61626c654f776e61626c653a2063616c6c65722069732081526c3737ba103a34329037bbb732b960991b602082015260400192915050565b6107c981610a11565b6020810161025f82846107c0565b6020810161025f82846107cf565b6020808252810161052681846107d8565b6020808252810161025f81610810565b6020808252810161025f81610865565b6020808252810161025f81610894565b6020808252810161025f816108d7565b6020808252810161025f81610905565b6020810161025f8284610954565b5190565b90815260200190565b600061025f82610a05565b151590565b6001600160a01b031690565b90565b60005b83811015610a2f578181015183820152602001610a17565b838111156103715750506000910152565b601f01601f191690565b610a53816109f5565b81146104ff57600080fd5b610a5381610a1156fea365627a7a7231582013dff15b19194a0c52927e7ccc74293c5f9835a34ac047f6fa07a7e3f1ef7f156c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "details": "Contract is responsible for fees calculations.",
    "methods": {
      "calculateDepositBridgeFee(uint256)": {
        "details": "Calculate and return fee for deposit through bridge.",
        "params": {
          "_massetAmount": "Amount of masset to deposit."
        },
        "return": "fee           Calculated fee amount."
      },
      "calculateDepositFee(uint256)": {
        "details": "Calculate and return deposit fee amount based on massetAmount.",
        "params": {
          "_massetAmount": "Amount of masset to deposit."
        },
        "return": "fee           Calculated fee amount."
      },
      "calculateRedeemBridgeFee(uint256)": {
        "details": "Calculate and return fee for redeem through bridge.",
        "params": {
          "_massetAmount": "Amount of masset."
        },
        "return": "fee           Calculated fee amount."
      },
      "calculateRedeemFee(uint256)": {
        "details": "Calculate and return redeem fee amount based on massetAmount.",
        "params": {
          "_massetAmount": "Amount of masset."
        },
        "return": "fee           Calculated fee amount."
      },
      "initialize(uint256,uint256,uint256,uint256)": {
        "details": "Contract initializer.",
        "params": {
          "_depositBridgeFee": "Amount of deposit through bridge fee in promils.",
          "_depositFee": "Amount of deposit fee in promils.",
          "_withdrawalBridgeFee": "Amount of redeem through bridge fee in promils.",
          "_withdrawalFee": "Amount of redeem fee in promils."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "FeesManager"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14369,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15638,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "depositFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15640,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "depositBridgeFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15642,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15644,
        "contract": "contracts/masset/FeesManager.sol:FeesManager",
        "label": "withdrawalBridgeFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}