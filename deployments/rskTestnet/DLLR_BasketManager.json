{
  "address": "0x3Aa4375380512f35765A3E6BfA778cd60dd05179",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bassets",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_factors",
          "type": "int256[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridges",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "checkBasketBalanceForDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "checkBasketBalanceForWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "convertBassetToMassetQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        }
      ],
      "name": "convertMassetToBassetQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "isValidBasset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a2979114513ccd4fd48f158edfed620487f040194212afe1d57cd5f5b3083c9",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0x3Aa4375380512f35765A3E6BfA778cd60dd05179",
    "transactionIndex": 0,
    "gasUsed": "600228",
    "logsBloom": "0x
    "blockHash": "0x2da1538b6636ba5d8f70586b4f28d38218394cbc8bdab1a313fcc2d93e93d7c9",
    "transactionHash": "0x9a2979114513ccd4fd48f158edfed620487f040194212afe1d57cd5f5b3083c9",
    "logs": [],
    "blockNumber": 3331281,
    "cumulativeGasUsed": "600228",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x56E18A12E1BACFA3446e818d1e70EbB6fe3AC9c6"
    ],
    [
      1
    ],
    [
      "0x0000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "1a3e2dbf67d3233bbb3b7921dfe5a273",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bassets\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_factors\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridges\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"checkBasketBalanceForDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"checkBasketBalanceForWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"convertBassetToMassetQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"}],\"name\":\"convertMassetToBassetQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"isValidBasset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/masset/versions/BasketManager.sol\":\"BasketManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"contracts/masset/versions/BasketManager.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract BasketManager {\\n\\n    using SafeMath for uint256;\\n\\n    // state\\n    address[] private bassetsArray;\\n    mapping(address => bool) private bassetsMap;\\n    mapping(address => int256) private factorMap;\\n    mapping(address => address) private bridgeMap;\\n\\n    function _isValidBasset(address _basset) internal view returns(bool) {\\n        return _basset != address(0) && bassetsMap[_basset];\\n    }\\n\\n    // external\\n    constructor(address[] memory _bassets, int256[] memory _factors, address[] memory _bridges) public {\\n        require(_bassets.length > 0, \\\"some basset required\\\");\\n        require(_bassets.length == _factors.length, \\\"factor array length mismatch\\\");\\n        require(_bridges.length == _factors.length, \\\"bridge array length mismatch\\\");\\n\\n        bassetsArray = _bassets;\\n        for(uint i=0; i<bassetsArray.length; i++) {\\n            address basset = bassetsArray[i];\\n            require(basset != address(0), \\\"invalid basset address\\\");\\n            require(!bassetsMap[basset], \\\"basset not unique\\\");\\n            bassetsMap[basset] = true;\\n            require(_factors[i] != 0, \\\"invalid factor\\\");\\n            factorMap[basset] = _factors[i];\\n            if(_bridges[i] != address(0)) {\\n                bridgeMap[basset] = _bridges[i];\\n            }\\n        }\\n    }\\n\\n    function isValidBasset(address _basset) external view returns(bool) {\\n        return _isValidBasset(_basset);\\n    }\\n\\n    function checkBasketBalanceForDeposit(address _basset, uint256 _bassetQuantity) external view returns(bool) {\\n        return _isValidBasset(_basset);\\n    }\\n\\n    function checkBasketBalanceForWithdrawal(address _basset, uint256 _bassetQuantity) external view returns(bool) {\\n        return _isValidBasset(_basset);\\n    }\\n\\n    function convertBassetToMassetQuantity(address _basset, uint256 _bassetQuantity) external view returns(uint256) {\\n        require(_isValidBasset(_basset), \\\"invalid basset\\\");\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            return _bassetQuantity.div(uint256(factor));\\n        }\\n        return _bassetQuantity.mul(uint256(-factor));\\n    }\\n\\n    function convertMassetToBassetQuantity(address _basset, uint256 _massetQuantity) external view returns(uint256) {\\n        require(_isValidBasset(_basset), \\\"invalid basset\\\");\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            return _massetQuantity.mul(uint256(factor));\\n        }\\n        return _massetQuantity.div(uint256(-factor));\\n    }\\n\\n    function getBridge(address _basset) external view returns(address) {\\n        return bridgeMap[_basset];\\n    }\\n\\n    function getVersion() external pure returns(string memory) {\\n        return \\\"2.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xfa09697aadb26238698afd995fd5ed7060c9d75b94cec5f9bb466c9211bcdee6\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b13380380610b138339818101604052606081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825186602082028301116401000000008211171561008557600080fd5b82525081516020918201928201910280838360005b838110156100b257818101518382015260200161009a565b50505050905001604052602001805160405193929190846401000000008211156100db57600080fd5b9083019060208201858111156100f057600080fd5b825186602082028301116401000000008211171561010d57600080fd5b82525081516020918201928201910280838360005b8381101561013a578181015183820152602001610122565b505050509050016040526020018051604051939291908464010000000082111561016357600080fd5b90830190602082018581111561017857600080fd5b825186602082028301116401000000008211171561019557600080fd5b82525081516020918201928201910280838360005b838110156101c25781810151838201526020016101aa565b505050509050016040525050506000835111610225576040805162461bcd60e51b815260206004820152601460248201527f736f6d6520626173736574207265717569726564000000000000000000000000604482015290519081900360640190fd5b815183511461027b576040805162461bcd60e51b815260206004820152601c60248201527f666163746f72206172726179206c656e677468206d69736d6174636800000000604482015290519081900360640190fd5b81518151146102d1576040805162461bcd60e51b815260206004820152601c60248201527f627269646765206172726179206c656e677468206d69736d6174636800000000604482015290519081900360640190fd5b82516102e4906000906020860190610512565b5060005b60005481101561050957600080828154811061030057fe5b6000918252602090912001546001600160a01b0316905080610369576040805162461bcd60e51b815260206004820152601660248201527f696e76616c696420626173736574206164647265737300000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526001602052604090205460ff16156103cb576040805162461bcd60e51b8152602060048201526011602482015270626173736574206e6f7420756e6971756560781b604482015290519081900360640190fd5b6001600160a01b0381166000908152600160208190526040909120805460ff1916909117905583518490839081106103ff57fe5b60200260200101516000141561044d576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103330b1ba37b960911b604482015290519081900360640190fd5b83828151811061045957fe5b6020908102919091018101516001600160a01b038316600090815260029092526040822055835184908490811061048c57fe5b60200260200101516001600160a01b031614610500578282815181106104ae57fe5b602002602001015160036000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b506001016102e8565b5050505061059e565b828054828255906000526020600020908101928215610567579160200282015b8281111561056757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610532565b50610573929150610577565b5090565b61059b91905b808211156105735780546001600160a01b031916815560010161057d565b90565b610566806105ad6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a9f02efe1161005b578063a9f02efe14610169578063c7bbc86514610169578063d80f5a87146101a9578063f44c7c8f146101cf5761007d565b80630d8e6e2c146100825780631af327bd146100ff5780635ac994611461013d575b600080fd5b61008a610211565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61012b6004803603604081101561011557600080fd5b506001600160a01b03813516906020013561022e565b60408051918252519081900360200190f35b61012b6004803603604081101561015357600080fd5b506001600160a01b0381351690602001356102d2565b6101956004803603604081101561017f57600080fd5b506001600160a01b038135169060200135610364565b604080519115158252519081900360200190f35b610195600480360360208110156101bf57600080fd5b50356001600160a01b0316610376565b6101f5600480360360208110156101e557600080fd5b50356001600160a01b0316610381565b604080516001600160a01b039092168252519081900360200190f35b6040805180820190915260038152620322e360ec1b602082015290565b60006102398361039f565b61027b576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6001600160a01b038316600090815260026020526040812054908113156102b4576102ac838263ffffffff6103d316565b9150506102cc565b6102c883600083900363ffffffff61041516565b9150505b92915050565b60006102dd8361039f565b61031f576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6001600160a01b03831660009081526002602052604081205490811315610350576102ac838263ffffffff61041516565b6102c883600083900363ffffffff6103d316565b600061036f8361039f565b9392505050565b60006102cc8261039f565b6001600160a01b039081166000908152600360205260409020541690565b60006001600160a01b038216158015906102cc5750506001600160a01b031660009081526001602052604090205460ff1690565b600061036f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061046e565b600082610424575060006102cc565b8282028284828161043157fe5b041461036f5760405162461bcd60e51b81526004018080602001828103825260218152602001806105116021913960400191505060405180910390fd5b600081836104fa5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104bf5781810151838201526020016104a7565b50505050905090810190601f1680156104ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161050657fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a7231582088f9c576eaf5d1cf74ad582d2eb4b69ea4e63a3a9ab5b45122113a78b30fba9f64736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a9f02efe1161005b578063a9f02efe14610169578063c7bbc86514610169578063d80f5a87146101a9578063f44c7c8f146101cf5761007d565b80630d8e6e2c146100825780631af327bd146100ff5780635ac994611461013d575b600080fd5b61008a610211565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61012b6004803603604081101561011557600080fd5b506001600160a01b03813516906020013561022e565b60408051918252519081900360200190f35b61012b6004803603604081101561015357600080fd5b506001600160a01b0381351690602001356102d2565b6101956004803603604081101561017f57600080fd5b506001600160a01b038135169060200135610364565b604080519115158252519081900360200190f35b610195600480360360208110156101bf57600080fd5b50356001600160a01b0316610376565b6101f5600480360360208110156101e557600080fd5b50356001600160a01b0316610381565b604080516001600160a01b039092168252519081900360200190f35b6040805180820190915260038152620322e360ec1b602082015290565b60006102398361039f565b61027b576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6001600160a01b038316600090815260026020526040812054908113156102b4576102ac838263ffffffff6103d316565b9150506102cc565b6102c883600083900363ffffffff61041516565b9150505b92915050565b60006102dd8361039f565b61031f576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6001600160a01b03831660009081526002602052604081205490811315610350576102ac838263ffffffff61041516565b6102c883600083900363ffffffff6103d316565b600061036f8361039f565b9392505050565b60006102cc8261039f565b6001600160a01b039081166000908152600360205260409020541690565b60006001600160a01b038216158015906102cc5750506001600160a01b031660009081526001602052604090205460ff1690565b600061036f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061046e565b600082610424575060006102cc565b8282028284828161043157fe5b041461036f5760405162461bcd60e51b81526004018080602001828103825260218152602001806105116021913960400191505060405180910390fd5b600081836104fa5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104bf5781810151838201526020016104a7565b50505050905090810190601f1680156104ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161050657fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a7231582088f9c576eaf5d1cf74ad582d2eb4b69ea4e63a3a9ab5b45122113a78b30fba9f64736f6c63430005110032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17168,
        "contract": "contracts/masset/versions/BasketManager.sol:BasketManager",
        "label": "bassetsArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17172,
        "contract": "contracts/masset/versions/BasketManager.sol:BasketManager",
        "label": "bassetsMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17176,
        "contract": "contracts/masset/versions/BasketManager.sol:BasketManager",
        "label": "factorMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 17180,
        "contract": "contracts/masset/versions/BasketManager.sol:BasketManager",
        "label": "bridgeMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      }
    }
  }
}