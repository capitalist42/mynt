{
  "address": "0xC2cB720A5575877a50c2a2446F99D2B8Af2Daff4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        }
      ],
      "name": "BassetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        }
      ],
      "name": "BassetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "BridgeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "factor",
          "type": "int256"
        }
      ],
      "name": "FactorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PausedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "basset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "RangeChanged",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_factor",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "addBasset",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bassets",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_factors",
          "type": "int256[]"
        },
        {
          "internalType": "address[]",
          "name": "_bridges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_mins",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxs",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_pausedFlags",
          "type": "bool[]"
        }
      ],
      "name": "addBassets",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "checkBasketBalanceForDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "checkBasketBalanceForWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bassetQuantity",
          "type": "uint256"
        }
      ],
      "name": "convertBassetToMassetQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "massetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bassetQuantity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_massetQuantity",
          "type": "uint256"
        }
      ],
      "name": "convertMassetToBassetQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bassetQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "massetQuantity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getBassetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBassets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getFactor",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "getRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTotalMassetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_masset",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "int256",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "isPowerOfTen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "isValidBasset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        }
      ],
      "name": "removeBasset",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_factor",
          "type": "int256"
        }
      ],
      "name": "setFactor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_flag",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_basset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setRange",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2768de488373c042ad47326a106fb0298aa44a6cf4fe4b1dc8c956eb0e21b06",
  "receipt": {
    "to": null,
    "from": "0x13Be55487D37FE3C66EE7305e1e9C1ac85de75Ae",
    "contractAddress": "0xC2cB720A5575877a50c2a2446F99D2B8Af2Daff4",
    "transactionIndex": 0,
    "gasUsed": "2181681",
    "logsBloom": "0x
    "blockHash": "0x88407b56b12fc6d77166b8f91fffbabd5066799b7ddc65626fc40acebabbd697",
    "transactionHash": "0xb2768de488373c042ad47326a106fb0298aa44a6cf4fe4b1dc8c956eb0e21b06",
    "logs": [],
    "blockNumber": 3331306,
    "cumulativeGasUsed": "2181681",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1a3e2dbf67d3233bbb3b7921dfe5a273",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"}],\"name\":\"BassetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"}],\"name\":\"BassetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"factor\",\"type\":\"int256\"}],\"name\":\"FactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"basset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"RangeChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_factor\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"addBasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bassets\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_factors\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"_bridges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mins\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_pausedFlags\",\"type\":\"bool[]\"}],\"name\":\"addBassets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"checkBasketBalanceForDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"checkBasketBalanceForWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bassetQuantity\",\"type\":\"uint256\"}],\"name\":\"convertBassetToMassetQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"massetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bassetQuantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_massetQuantity\",\"type\":\"uint256\"}],\"name\":\"convertMassetToBassetQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bassetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"massetQuantity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getBassetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBassets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getFactor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalMassetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masset\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"isPowerOfTen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"isValidBasset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"}],\"name\":\"removeBasset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_factor\",\"type\":\"int256\"}],\"name\":\"setFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract is responsible for mAsset and bAsset exchange process and managing basket with bAsset tokens. Allows to add and/or remove bAsset, calculate balances, converts tokens quantity to adjust precisions or set/get parameters: bridge, factor, range and paused.\",\"methods\":{\"addBasset(address,int256,address,uint256,uint256,bool)\":{\"details\":\"Adds a new bAsset.\",\"params\":{\"_basset\":\"Address of bAsset.\",\"_bridge\":\"Address of bridge.\",\"_factor\":\"Factor amount.\",\"_max\":\"Maximum ratio in basket.\",\"_min\":\"Minimum ratio in basket.\",\"_paused\":\"Flag to determine if basset should be paused.\"}},\"addBassets(address[],int256[],address[],uint256[],uint256[],bool[])\":{\"details\":\"Adds multiple bAssets.\"},\"checkBasketBalanceForDeposit(address,uint256)\":{\"details\":\"Checks if ratio of bAssets in basket is within limits to make a deposit of specific asset.\",\"params\":{\"_basset\":\"Address of bAsset to deposit.\",\"_bassetQuantity\":\"Amount of bAssets to deposit.\"},\"return\":\"Flag indicating whether a deposit can be made.\"},\"checkBasketBalanceForWithdrawal(address,uint256)\":{\"details\":\"Checks if ratio of bAssets in basket is within limits to make a withdrawal of specific asset.\",\"params\":{\"_basset\":\"Address of bAsset to redeem.\",\"_bassetQuantity\":\"Amount of bAssets to redeem.\"},\"return\":\"Flag indicating whether a withdrawal can be made.\"},\"convertBassetToMassetQuantity(address,uint256)\":{\"details\":\"Converts bAsset to mAsset quantity. This is used to adjust precision.     Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.     Since the ratio may cause fractions, the bAsset is adjusted to match nearest non fraction amount and returned.\",\"params\":{\"_basset\":\"Address of bAsset.\",\"_bassetQuantity\":\"Amount of bAssets to check.\"},\"return\":\"Calculated amount of mAssets and Adjusted amount of bAssets.\"},\"convertMassetToBassetQuantity(address,uint256)\":{\"details\":\"Converts mAsset to bAsset quantity. This is used to adjust precisions.     Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.     Since the ratio may cause fractions, the mAsset is adjusted to match nearest non fraction amount and returned.\",\"params\":{\"_basset\":\"Address of bAsset.\",\"_massetQuantity\":\"Amount of mAssets to check.\"},\"return\":\"Calculated amount of bAssets and Adjusted amount of mAssets.\"},\"getTotalMassetBalance()\":{\"details\":\"Calculates total mAsset balance.\",\"return\":\"Calculated total balance.\"},\"initialize(address)\":{\"details\":\"Contract initializer.\",\"params\":{\"_masset\":\"Address of the mAsset contract.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"isPowerOfTen(int256)\":{\"details\":\"Returns true if the number is power of ten.\",\"params\":{\"x\":\"Number to be checked.\"},\"return\":\"Is the number power of ten.\"},\"isValidBasset(address)\":{\"details\":\"Checks if bAasset is valid by checking its presence in the bAssets factors list.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeBasset(address)\":{\"details\":\"Removes bAsset\",\"params\":{\"_basset\":\"Address of bAsset to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BasketManagerV3\"},\"userdoc\":{\"methods\":{\"addBassets(address[],int256[],address[],uint256[],uint256[],bool[])\":{\"notice\":\"All parameters must be arrays with proper order and equal length.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/masset/BasketManagerV3.sol\":\"BasketManagerV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"contracts/helpers/InitializableOwnable.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract InitializableOwnable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _initialize() internal {\\n        require(_owner == address(0), \\\"already initialized\\\");\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    * this method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n\\n    function _onlyOwner() internal view {\\n        require(isOwner(), \\\"InitializableOwnable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"InitializableOwnable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3ed80a5e37beb6037c333fd39ffa494420a1f95569c8e283d1f9cc8c742b2361\"},\"contracts/masset/BasketManagerV3.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { InitializableOwnable } from \\\"../helpers/InitializableOwnable.sol\\\";\\n\\n\\n/**\\n * @title BasketManagerV3\\n * @dev Contract is responsible for mAsset and bAsset exchange process and\\n * managing basket with bAsset tokens.\\n * Allows to add and/or remove bAsset, calculate balances, converts tokens quantity\\n * to adjust precisions or set/get parameters: bridge, factor, range and paused.\\n */\\n\\ncontract BasketManagerV3 is InitializableOwnable {\\n\\n    using SafeMath for uint256;\\n\\n    // Events\\n\\n    /**\\n     * @dev Event emitted when basset is added.\\n     * @param basset Address of the bAsset contract.\\n     */\\n    event BassetAdded (address basset);\\n\\n    /**\\n     * @dev Event emitted when basset is removed.\\n     * @param basset Address of the bAsset contract.\\n     */\\n    event BassetRemoved (address basset);\\n\\n    /**\\n     * @dev Event emitted when factor is changed.\\n     * @param basset Address of the bAsset contract.\\n     * @param factor Factor of fees.\\n     */\\n    event FactorChanged (address basset, int256 factor);\\n\\n    /**\\n     * @dev Event emitted when bridge is changed.\\n     * @param basset Address of the bAsset contract.\\n     * @param bridge Address of bridge.\\n     */\\n    event BridgeChanged (address basset, address bridge);\\n\\n    /**\\n     * @dev Event emitted when range is changed.\\n     * @param basset    Address of the bAsset contract.\\n     * @param min       Minimal value of range.\\n     * @param max       Maximal value of range.\\n     */\\n    event RangeChanged (address basset, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Event emitted when paused is changed.\\n     * @param basset    Address of the bAsset contract.\\n     * @param paused    Determine if paused or not.\\n     */\\n    event PausedChanged (address basset, bool paused);\\n\\n    uint256 constant MAX_VALUE = 1000;\\n\\n    // state\\n    string version;\\n    address masset;\\n    address[] private bassetsArray;\\n    mapping(address => int256) private factorMap;\\n    mapping(address => address) private bridgeMap;\\n    mapping(address => uint256) private minMap;\\n    mapping(address => uint256) private maxMap;\\n    mapping(address => bool) private pausedMap;\\n\\n    // Modifiers\\n\\n    /**\\n    * @dev Prevents a contract from making actions on paused bAssets.\\n    */\\n    modifier notPaused(address _basset) {\\n        _notPaused(_basset);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Prevents a contract from making actions on invalid bAssets.\\n    */\\n    modifier validBasset(address _basset) {\\n        _validBasset(_basset);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Prevents a contract from making actions on paused bAssets.\\n    * This method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n    function _notPaused(address _basset) internal view {\\n        require(!pausedMap[_basset], \\\"basset is paused\\\");\\n    }\\n\\n\\n    /**\\n    * @dev Prevents a contract from making actions on invalid bAssets.\\n    * This method is called and separated from modifier to optimize bytecode and save gas.\\n    */\\n    function _validBasset(address _basset) internal view {\\n        require(factorMap[_basset] != 0, \\\"invalid basset\\\");\\n    }\\n\\n    // Initializer\\n\\n    /**\\n   * @dev Contract initializer.\\n   * @param _masset     Address of the mAsset contract.\\n   */\\n    function initialize(address _masset) external {\\n        require(masset == address(0), \\\"already initialized\\\");\\n        _initialize();\\n        masset = _masset;\\n        version = \\\"3.0\\\";\\n    }\\n\\n    // Methods for Masset logic\\n\\n    /**\\n     * @dev Checks if bAasset is valid by checking its presence in the bAssets factors list.\\n     */\\n    function isValidBasset(address _basset) public view returns(bool) {\\n        return (factorMap[_basset] != 0);\\n    }\\n\\n    /**\\n     * @dev Checks if ratio of bAssets in basket is within limits to make a deposit of specific asset.\\n     * @param _basset           Address of bAsset to deposit.\\n     * @param _bassetQuantity   Amount of bAssets to deposit.\\n     * @return Flag indicating whether a deposit can be made.\\n     */\\n    function checkBasketBalanceForDeposit(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) notPaused(_basset) returns(bool) {\\n\\n        (uint256 massetQuantity, ) = convertBassetToMassetQuantity(_basset, _bassetQuantity);\\n        uint256 bassetBalance = IERC20(_basset).balanceOf(masset);\\n\\n        (uint256 totalBassetBalanceInMasset, ) = convertBassetToMassetQuantity(_basset, bassetBalance);\\n\\n        uint256 balance = totalBassetBalanceInMasset.add(massetQuantity);\\n        uint256 total = getTotalMassetBalance().add(massetQuantity);\\n        uint256 ratio = balance.mul(MAX_VALUE).div(total);\\n        uint256 max = maxMap[_basset];\\n        return ratio <= max;\\n    }\\n\\n    /**\\n     * @dev Checks if ratio of bAssets in basket is within limits to make a withdrawal of specific asset.\\n     * @param _basset           Address of bAsset to redeem.\\n     * @param _bassetQuantity   Amount of bAssets to redeem.\\n     * @return Flag indicating whether a withdrawal can be made.\\n     */\\n    function checkBasketBalanceForWithdrawal(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) notPaused(_basset) returns(bool) {\\n\\n        (uint256 massetQuantity, ) = convertBassetToMassetQuantity(_basset, _bassetQuantity);\\n        uint256 bassetBalance = IERC20(_basset).balanceOf(masset);\\n        (uint256 totalBassetBalanceInMasset, ) = convertBassetToMassetQuantity(_basset, bassetBalance);\\n\\n        require(totalBassetBalanceInMasset >= massetQuantity, \\\"basset balance is not sufficient\\\");\\n\\n        uint256 balance = totalBassetBalanceInMasset.sub(massetQuantity);\\n        uint256 total = getTotalMassetBalance().sub(massetQuantity);\\n\\n        uint256 min = minMap[_basset];\\n        if (total == 0) return min == 0;\\n\\n        uint256 ratio = balance.mul(MAX_VALUE).div(total);\\n        return ratio >= min;\\n    }\\n\\n    /**\\n     * @dev Converts bAsset to mAsset quantity. This is used to adjust precision.\\n     *      Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.\\n     *      Since the ratio may cause fractions, the bAsset is adjusted to match nearest non fraction amount and returned.\\n     * @param _basset           Address of bAsset.\\n     * @param _bassetQuantity   Amount of bAssets to check.\\n     * @return Calculated amount of mAssets and Adjusted amount of bAssets.\\n     */\\n    function convertBassetToMassetQuantity(\\n        address _basset,\\n        uint256 _bassetQuantity) public view validBasset(_basset) returns(uint256 massetQuantity, uint256 bassetQuantity) {\\n\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            massetQuantity = _bassetQuantity.div(uint256(factor));\\n            bassetQuantity = massetQuantity.mul(uint256(factor));\\n            return (massetQuantity, bassetQuantity);\\n        }\\n        massetQuantity = _bassetQuantity.mul(uint256(-factor));\\n        return (massetQuantity, _bassetQuantity);\\n    }\\n\\n    /**\\n     * @dev Converts mAsset to bAsset quantity. This is used to adjust precisions.\\n     *      Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.\\n     *      Since the ratio may cause fractions, the mAsset is adjusted to match nearest non fraction amount and returned.\\n     * @param _basset           Address of bAsset.\\n     * @param _massetQuantity   Amount of mAssets to check.\\n     * @return Calculated amount of bAssets and Adjusted amount of mAssets.\\n     */\\n    function convertMassetToBassetQuantity(\\n        address _basset,\\n        uint256 _massetQuantity) public view validBasset(_basset) returns(uint256 bassetQuantity, uint256 massetQuantity) {\\n\\n        int256 factor = factorMap[_basset];\\n        if(factor > 0) {\\n            bassetQuantity = _massetQuantity.mul(uint256(factor));\\n            return (bassetQuantity, _massetQuantity);\\n        }\\n        bassetQuantity = _massetQuantity.div(uint256(-factor));\\n        massetQuantity = bassetQuantity.mul(uint256(-factor));\\n        return (bassetQuantity, massetQuantity);\\n    }\\n\\n    // Getters\\n\\n    /**\\n     * @dev Calculates total mAsset balance.\\n     * @return Calculated total balance.\\n     */\\n    function getTotalMassetBalance() public view returns (uint256 total) {\\n        for(uint i=0; i<bassetsArray.length; i++) {\\n            address basset = bassetsArray[i];\\n            uint256 balance = IERC20(basset).balanceOf(masset);\\n            (uint256 massetQuantity, ) = convertBassetToMassetQuantity(basset, balance);\\n            total += massetQuantity;\\n        }\\n    }\\n\\n    function getBassetBalance(address _basset) public view returns (uint256) {\\n        return IERC20(_basset).balanceOf(masset);\\n    }\\n\\n    function getVersion() external view returns(string memory) {\\n        return version;\\n    }\\n\\n    function getBassets() public view returns(address[] memory) {\\n        return bassetsArray;\\n    }\\n\\n    function getFactor(address _basset) public view validBasset(_basset) returns(int256) {\\n        return factorMap[_basset];\\n    }\\n\\n    function getBridge(address _basset) public view validBasset(_basset) returns(address) {\\n        return bridgeMap[_basset];\\n    }\\n\\n    function getRange(address _basset) public view validBasset(_basset) returns(uint256 min, uint256 max) {\\n        min = minMap[_basset];\\n        max = maxMap[_basset];\\n    }\\n\\n    function getPaused(address _basset) public view validBasset(_basset) returns(bool) {\\n        return pausedMap[_basset];\\n    }\\n\\n    // Admin methods\\n\\n    /**\\n     * @dev Adds a new bAsset.\\n     * @param _basset       Address of bAsset.\\n     * @param _factor       Factor amount.\\n     * @param _bridge       Address of bridge.\\n     * @param _min          Minimum ratio in basket.\\n     * @param _max          Maximum ratio in basket.\\n     * @param _paused       Flag to determine if basset should be paused.\\n     */\\n    function addBasset(address _basset, int256 _factor, address _bridge, uint256 _min, uint256 _max, bool _paused) public onlyOwner {\\n        require(_basset != address(0), \\\"invalid basset address\\\");\\n        require(factorMap[_basset] == 0, \\\"basset already exists\\\");\\n        require(_factor != 0, \\\"invalid factor\\\");\\n\\n        bassetsArray.push(_basset);\\n\\n        setFactor(_basset, _factor);\\n        setRange(_basset, _min, _max);\\n        setBridge(_basset, _bridge);\\n        setPaused(_basset, _paused);\\n\\n        emit BassetAdded(_basset);\\n    }\\n\\n    /**\\n     * @dev Adds multiple bAssets.\\n     * @notice All parameters must be arrays with proper order and equal length.\\n     */\\n    function addBassets(\\n        address[] memory _bassets, int256[] memory _factors, address[] memory _bridges,\\n        uint256[] memory _mins, uint256[] memory _maxs, bool[] memory _pausedFlags) public onlyOwner {\\n\\n        uint length = _bassets.length;\\n        require(\\n            _factors.length == length &&\\n            _bridges.length == length &&\\n            _mins.length == length &&\\n            _maxs.length == length &&\\n            _pausedFlags.length == length, \\\"invalid lengths\\\");\\n\\n        for(uint i=0; i<length; i++) {\\n            addBasset(_bassets[i], _factors[i], _bridges[i], _mins[i], _maxs[i], _pausedFlags[i]);\\n        }\\n    }\\n\\n    function setRange(address _basset, uint256 _min, uint256 _max) public validBasset(_basset) onlyOwner {\\n        require(_min <= MAX_VALUE, \\\"invalid minimum\\\");\\n        require(_max <= MAX_VALUE, \\\"invalid maximum\\\");\\n        require(_max >= _min, \\\"invalid range\\\");\\n        minMap[_basset] = _min;\\n        maxMap[_basset] = _max;\\n\\n        emit RangeChanged(_basset, _min, _max);\\n    }\\n\\n    /**\\n     * @dev Returns true if the number is power of ten.\\n     * @param x     Number to be checked.\\n     * @return      Is the number power of ten.\\n     */\\n    function isPowerOfTen(int256 x) public pure returns (bool result) {\\n        uint256 number;\\n\\n        if (x < 0) number = uint256(-x);\\n        else number = uint256(x);\\n\\n        while (number >= 10 && number % 10 == 0) {\\n            number /= 10;\\n        }\\n\\n        result = number == 1;\\n    }\\n\\n    function setFactor(address _basset, int256 _factor) public onlyOwner {\\n        require(_factor != 0, \\\"invalid factor\\\");\\n        require(_factor == 1 || isPowerOfTen(_factor), \\\"factor must be power of 10\\\");\\n        factorMap[_basset] = _factor;\\n\\n        emit FactorChanged(_basset, _factor);\\n    }\\n\\n    function setBridge(address _basset, address _bridge) public validBasset(_basset) onlyOwner {\\n        bridgeMap[_basset] = _bridge;\\n\\n        emit BridgeChanged(_basset, _bridge);\\n    }\\n\\n    function setPaused(address _basset, bool _flag) public validBasset(_basset) onlyOwner {\\n        pausedMap[_basset] = _flag;\\n\\n        emit PausedChanged(_basset, _flag);\\n    }\\n\\n    /**\\n     * @dev Removes bAsset\\n     * @param _basset       Address of bAsset to remove.\\n     */\\n    function removeBasset(address _basset) public validBasset(_basset) onlyOwner {\\n        require(getBassetBalance(_basset) == 0, \\\"balance not zero\\\");\\n        factorMap[_basset] = 0;\\n\\n        uint256 index;\\n        for(uint i = 0; i < bassetsArray.length - 1; i++) {\\n            if (bassetsArray[i] == _basset) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        bassetsArray[index] = bassetsArray[bassetsArray.length - 1];\\n        bassetsArray.pop();\\n\\n        emit BassetRemoved(_basset);\\n    }\\n}\\n\",\"keccak256\":\"0x21f4cf37686c2eb1303201f71dbf7c0dbdc2b364ea9ab0dcf1713532c2e23e23\"}},\"version\":1}",
  "bytecode": "0x6080604052611f29806100136000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80639bf761b7116100de578063c7bbc86511610097578063f24947dc11610071578063f24947dc1461087b578063f2fde38b146108c3578063f44c7c8f146108e9578063f5bffc351461090f5761018e565b8063c7bbc86514610821578063d80f5a871461084d578063eb72ccd5146108735761018e565b80639bf761b7146104245780639d22ae8c14610450578063a37814951461047e578063a9f02efe146107a9578063b55d9904146107d5578063c4d66de8146107fb5761018e565b8063620611c31161014b578063715018a611610125578063715018a6146103c257806389eba0d2146103ca5780638da5cb5b146103f85780638f32d59b1461041c5761018e565b8063620611c314610327578063623a564b14610358578063689418691461038a5761018e565b806309f2a983146101935780630d8e6e2c146101bb5780631af327bd146102385780631d3ce3981461027d5780635521c653146102d55780635ac99461146102fb575b600080fd5b6101b9600480360360208110156101a957600080fd5b50356001600160a01b0316610935565b005b6101c3610add565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fd5781810151838201526020016101e5565b50505050905090810190601f16801561022a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102646004803603604081101561024e57600080fd5b506001600160a01b038135169060200135610b73565b6040805192835260208301919091528051918290030190f35b610285610bef565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c15781810151838201526020016102a9565b505050509050019250505060405180910390f35b610264600480360360208110156102eb57600080fd5b50356001600160a01b0316610c50565b6102646004803603604081101561031157600080fd5b506001600160a01b038135169060200135610c88565b6103446004803603602081101561033d57600080fd5b5035610d07565b604080519115158252519081900360200190f35b6101b96004803603606081101561036e57600080fd5b506001600160a01b038135169060208101359060400135610d4a565b6103b0600480360360208110156103a057600080fd5b50356001600160a01b0316610e9d565b60408051918252519081900360200190f35b6101b9610ec6565b6101b9600480360360408110156103e057600080fd5b506001600160a01b0381351690602001351515610f18565b610400610f8f565b604080516001600160a01b039092168252519081900360200190f35b610344610f9e565b6101b96004803603604081101561043a57600080fd5b506001600160a01b038135169060200135610fc2565b6101b96004803603604081101561046657600080fd5b506001600160a01b03813581169160200135166110ca565b6101b9600480360360c081101561049457600080fd5b810190602081018135600160201b8111156104ae57600080fd5b8201836020820111156104c057600080fd5b803590602001918460208302840111600160201b831117156104e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053057600080fd5b82018360208201111561054257600080fd5b803590602001918460208302840111600160201b8311171561056357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b257600080fd5b8201836020820111156105c457600080fd5b803590602001918460208302840111600160201b831117156105e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063457600080fd5b82018360208201111561064657600080fd5b803590602001918460208302840111600160201b8311171561066757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106b657600080fd5b8201836020820111156106c857600080fd5b803590602001918460208302840111600160201b831117156106e957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561073857600080fd5b82018360208201111561074a57600080fd5b803590602001918460208302840111600160201b8311171561076b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061114a945050505050565b610344600480360360408110156107bf57600080fd5b506001600160a01b038135169060200135611268565b610344600480360360208110156107eb57600080fd5b50356001600160a01b031661139b565b6101b96004803603602081101561081157600080fd5b50356001600160a01b03166113c7565b6103446004803603604081101561083757600080fd5b506001600160a01b03813516906020013561146c565b6103446004803603602081101561086357600080fd5b50356001600160a01b03166115fd565b6103b061161a565b6101b9600480360360c081101561089157600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060808101359060a0013515156116e0565b6101b9600480360360208110156108d957600080fd5b50356001600160a01b031661189a565b610400600480360360208110156108ff57600080fd5b50356001600160a01b03166118ae565b6103b06004803603602081101561092557600080fd5b50356001600160a01b03166118da565b8061093f8161195a565b6109476119b5565b610950826118da565b15610995576040805162461bcd60e51b815260206004820152601060248201526f62616c616e6365206e6f74207a65726f60801b604482015290519081900360640190fd5b6001600160a01b0382166000908152600460205260408120819055805b60035460001901811015610a0257836001600160a01b0316600382815481106109d757fe5b6000918252602090912001546001600160a01b031614156109fa57809150610a02565b6001016109b2565b50600380546000198101908110610a1557fe5b600091825260209091200154600380546001600160a01b039092169183908110610a3b57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610a7457fe5b6000828152602090819020820160001990810180546001600160a01b0319169055909101909155604080516001600160a01b038616815290517f1e5281bbecf5c15104f9e35265dbe738c1cd2597613cbf4a0a51713448bc13b9929181900390910190a1505050565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b685780601f10610b3d57610100808354040283529160200191610b68565b820191906000526020600020905b815481529060010190602001808311610b4b57829003601f168201915b505050505090505b90565b60008083610b808161195a565b6001600160a01b03851660009081526004602052604081205490811315610bcc57610bb1858263ffffffff6119fa16565b9350610bc3848263ffffffff611a4516565b9250610be79050565b610be085600083900363ffffffff611a4516565b9350849250505b509250929050565b60606003805480602002602001604051908101604052809291908181526020018280548015610b6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c29575050505050905090565b60008082610c5d8161195a565b5050506001600160a01b03166000908152600660209081526040808320546007909252909120549091565b60008083610c958161195a565b6001600160a01b03851660009081526004602052604081205490811315610cd257610cc6858263ffffffff611a4516565b9350849250610be79050565b610ce685600083900363ffffffff6119fa16565b9350610cfc84600083900363ffffffff611a4516565b925050509250929050565b6000806000831215610d1e57826000039050610d21565b50815b600a8110158015610d335750600a8106155b15610d4157600a9004610d21565b60011492915050565b82610d548161195a565b610d5c6119b5565b6103e8831115610da5576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206d696e696d756d60881b604482015290519081900360640190fd5b6103e8821115610dee576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206d6178696d756d60881b604482015290519081900360640190fd5b82821015610e33576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c69642072616e676560981b604482015290519081900360640190fd5b6001600160a01b0384166000818152600660209081526040808320879055600782529182902085905581519283528201859052818101849052517fe3b935f735d8a72a31934e03fd96d995c5b3096c7362bc7e8796ab9e1ffe668c9181900360600190a150505050565b600081610ea98161195a565b50506001600160a01b031660009081526004602052604090205490565b610ece6119b5565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b81610f228161195a565b610f2a6119b5565b6001600160a01b038316600081815260086020908152604091829020805460ff191686151590811790915582519384529083015280517f6567e54649bc4d1136cad0f12cfc472ef5c8255ad12c3e46ecf4ef245f06c6cc9281900390910190a1505050565b6000546001600160a01b031690565b600080546001600160a01b0316610fb3611a9e565b6001600160a01b031614905090565b610fca6119b5565b8061100d576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103330b1ba37b960911b604482015290519081900360640190fd5b8060011480611020575061102081610d07565b611071576040805162461bcd60e51b815260206004820152601a60248201527f666163746f72206d75737420626520706f776572206f66203130000000000000604482015290519081900360640190fd5b6001600160a01b0382166000818152600460209081526040918290208490558151928352820183905280517fbd9d78e6bf6327f299e2cc40ef087c54546ef9ac6bea857cdc90b57270bbb5899281900390910190a15050565b816110d48161195a565b6110dc6119b5565b6001600160a01b0383811660008181526005602090815260409182902080546001600160a01b0319169487169485179055815192835282019290925281517fd565484d693f5157abcceb853139678038bc740991b0a4dc3baa2426325bb3c0929181900390910190a1505050565b6111526119b5565b85518551811480156111645750808551145b80156111705750808451145b801561117c5750808351145b80156111885750808251145b6111cb576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b604482015290519081900360640190fd5b60005b8181101561125e576112568882815181106111e557fe5b60200260200101518883815181106111f957fe5b602002602001015188848151811061120d57fe5b602002602001015188858151811061122157fe5b602002602001015188868151811061123557fe5b602002602001015188878151811061124957fe5b60200260200101516116e0565b6001016111ce565b5050505050505050565b6000826112748161195a565b8361127e81611aa2565b600061128a8686610b73565b50600254604080516370a0823160e01b81526001600160a01b0392831660048201529051929350600092918916916370a0823191602480820192602092909190829003018186803b1580156112de57600080fd5b505afa1580156112f2573d6000803e3d6000fd5b505050506040513d602081101561130857600080fd5b5051905060006113188883610b73565b509050600061132d828563ffffffff611b0316565b905060006113498561133d61161a565b9063ffffffff611b0316565b9050600061136f82611363856103e863ffffffff611a4516565b9063ffffffff6119fa16565b6001600160a01b038c16600090815260076020526040902054101598505050505050505b505092915050565b6000816113a78161195a565b50506001600160a01b031660009081526008602052604090205460ff1690565b6002546001600160a01b03161561141b576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b611423611b5d565b600280546001600160a01b0319166001600160a01b038316179055604080518082019091526003808252620332e360ec1b602090920191825261146891600191611de5565b5050565b6000826114788161195a565b8361148281611aa2565b600061148e8686610b73565b50600254604080516370a0823160e01b81526001600160a01b0392831660048201529051929350600092918916916370a0823191602480820192602092909190829003018186803b1580156114e257600080fd5b505afa1580156114f6573d6000803e3d6000fd5b505050506040513d602081101561150c57600080fd5b50519050600061151c8883610b73565b50905082811015611574576040805162461bcd60e51b815260206004820181905260248201527f6261737365742062616c616e6365206973206e6f742073756666696369656e74604482015290519081900360640190fd5b6000611586828563ffffffff611c0716565b905060006115a28561159661161a565b9063ffffffff611c0716565b6001600160a01b038b16600090815260066020526040902054909150816115d157159750611393945050505050565b60006115e983611363866103e863ffffffff611a4516565b91909110159b9a5050505050505050505050565b6001600160a01b0316600090815260046020526040902054151590565b6000805b6003548110156116dc5760006003828154811061163757fe5b6000918252602080832090910154600254604080516370a0823160e01b81526001600160a01b039283166004820152905191909216945084926370a082319260248082019391829003018186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d60208110156116bb57600080fd5b5051905060006116cb8383610b73565b50949094019350505060010161161e565b5090565b6116e86119b5565b6001600160a01b03861661173c576040805162461bcd60e51b8152602060048201526016602482015275696e76616c696420626173736574206164647265737360501b604482015290519081900360640190fd5b6001600160a01b0386166000908152600460205260409020541561179f576040805162461bcd60e51b815260206004820152601560248201527462617373657420616c72656164792065786973747360581b604482015290519081900360640190fd5b846117e2576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103330b1ba37b960911b604482015290519081900360640190fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0388161790556118378686610fc2565b611842868484610d4a565b61184c86856110ca565b6118568682610f18565b604080516001600160a01b038816815290517fa83f9302fa4684335dd26b1bdd925929618565fa0f22bd9e91ab01753d8bf13c9181900360200190a1505050505050565b6118a26119b5565b6118ab81611c49565b50565b6000816118ba8161195a565b50506001600160a01b039081166000908152600560205260409020541690565b600254604080516370a0823160e01b81526001600160a01b03928316600482015290516000928416916370a08231916024808301926020929190829003018186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d602081101561195257600080fd5b505192915050565b6001600160a01b0381166000908152600460205260409020546118ab576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6119bd610f9e565b6119f85760405162461bcd60e51b815260040180806020018281038252602d815260200180611ec8602d913960400191505060405180910390fd5b565b6000611a3c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611ce9565b90505b92915050565b600082611a5457506000611a3f565b82820282848281611a6157fe5b0414611a3c5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ea76021913960400191505060405180910390fd5b3390565b6001600160a01b03811660009081526008602052604090205460ff16156118ab576040805162461bcd60e51b815260206004820152601060248201526f18985cdcd95d081a5cc81c185d5cd95960821b604482015290519081900360640190fd5b600082820183811015611a3c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000546001600160a01b031615611bb1576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000611bbb611a9e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b6000611a3c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611d8b565b6001600160a01b038116611c8e5760405162461bcd60e51b8152600401808060200182810382526033815260200180611e746033913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008183611d755760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d3a578181015183820152602001611d22565b50505050905090810190601f168015611d675780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611d8157fe5b0495945050505050565b60008184841115611ddd5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611d3a578181015183820152602001611d22565b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e2657805160ff1916838001178555611e53565b82800160010185558215611e53579182015b82811115611e53578251825591602001919060010190611e38565b506116dc92610b709250905b808211156116dc5760008155600101611e5f56fe496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e697469616c697a61626c654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a265627a7a72315820ad7db8a99e37429e4c97650af575a4f44badabe5a4ef9fa754e4adb52e87e90364736f6c63430005110032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80639bf761b7116100de578063c7bbc86511610097578063f24947dc11610071578063f24947dc1461087b578063f2fde38b146108c3578063f44c7c8f146108e9578063f5bffc351461090f5761018e565b8063c7bbc86514610821578063d80f5a871461084d578063eb72ccd5146108735761018e565b80639bf761b7146104245780639d22ae8c14610450578063a37814951461047e578063a9f02efe146107a9578063b55d9904146107d5578063c4d66de8146107fb5761018e565b8063620611c31161014b578063715018a611610125578063715018a6146103c257806389eba0d2146103ca5780638da5cb5b146103f85780638f32d59b1461041c5761018e565b8063620611c314610327578063623a564b14610358578063689418691461038a5761018e565b806309f2a983146101935780630d8e6e2c146101bb5780631af327bd146102385780631d3ce3981461027d5780635521c653146102d55780635ac99461146102fb575b600080fd5b6101b9600480360360208110156101a957600080fd5b50356001600160a01b0316610935565b005b6101c3610add565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fd5781810151838201526020016101e5565b50505050905090810190601f16801561022a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102646004803603604081101561024e57600080fd5b506001600160a01b038135169060200135610b73565b6040805192835260208301919091528051918290030190f35b610285610bef565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c15781810151838201526020016102a9565b505050509050019250505060405180910390f35b610264600480360360208110156102eb57600080fd5b50356001600160a01b0316610c50565b6102646004803603604081101561031157600080fd5b506001600160a01b038135169060200135610c88565b6103446004803603602081101561033d57600080fd5b5035610d07565b604080519115158252519081900360200190f35b6101b96004803603606081101561036e57600080fd5b506001600160a01b038135169060208101359060400135610d4a565b6103b0600480360360208110156103a057600080fd5b50356001600160a01b0316610e9d565b60408051918252519081900360200190f35b6101b9610ec6565b6101b9600480360360408110156103e057600080fd5b506001600160a01b0381351690602001351515610f18565b610400610f8f565b604080516001600160a01b039092168252519081900360200190f35b610344610f9e565b6101b96004803603604081101561043a57600080fd5b506001600160a01b038135169060200135610fc2565b6101b96004803603604081101561046657600080fd5b506001600160a01b03813581169160200135166110ca565b6101b9600480360360c081101561049457600080fd5b810190602081018135600160201b8111156104ae57600080fd5b8201836020820111156104c057600080fd5b803590602001918460208302840111600160201b831117156104e157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561053057600080fd5b82018360208201111561054257600080fd5b803590602001918460208302840111600160201b8311171561056357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156105b257600080fd5b8201836020820111156105c457600080fd5b803590602001918460208302840111600160201b831117156105e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561063457600080fd5b82018360208201111561064657600080fd5b803590602001918460208302840111600160201b8311171561066757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106b657600080fd5b8201836020820111156106c857600080fd5b803590602001918460208302840111600160201b831117156106e957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561073857600080fd5b82018360208201111561074a57600080fd5b803590602001918460208302840111600160201b8311171561076b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061114a945050505050565b610344600480360360408110156107bf57600080fd5b506001600160a01b038135169060200135611268565b610344600480360360208110156107eb57600080fd5b50356001600160a01b031661139b565b6101b96004803603602081101561081157600080fd5b50356001600160a01b03166113c7565b6103446004803603604081101561083757600080fd5b506001600160a01b03813516906020013561146c565b6103446004803603602081101561086357600080fd5b50356001600160a01b03166115fd565b6103b061161a565b6101b9600480360360c081101561089157600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060808101359060a0013515156116e0565b6101b9600480360360208110156108d957600080fd5b50356001600160a01b031661189a565b610400600480360360208110156108ff57600080fd5b50356001600160a01b03166118ae565b6103b06004803603602081101561092557600080fd5b50356001600160a01b03166118da565b8061093f8161195a565b6109476119b5565b610950826118da565b15610995576040805162461bcd60e51b815260206004820152601060248201526f62616c616e6365206e6f74207a65726f60801b604482015290519081900360640190fd5b6001600160a01b0382166000908152600460205260408120819055805b60035460001901811015610a0257836001600160a01b0316600382815481106109d757fe5b6000918252602090912001546001600160a01b031614156109fa57809150610a02565b6001016109b2565b50600380546000198101908110610a1557fe5b600091825260209091200154600380546001600160a01b039092169183908110610a3b57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610a7457fe5b6000828152602090819020820160001990810180546001600160a01b0319169055909101909155604080516001600160a01b038616815290517f1e5281bbecf5c15104f9e35265dbe738c1cd2597613cbf4a0a51713448bc13b9929181900390910190a1505050565b60018054604080516020601f60026000196101008789161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b685780601f10610b3d57610100808354040283529160200191610b68565b820191906000526020600020905b815481529060010190602001808311610b4b57829003601f168201915b505050505090505b90565b60008083610b808161195a565b6001600160a01b03851660009081526004602052604081205490811315610bcc57610bb1858263ffffffff6119fa16565b9350610bc3848263ffffffff611a4516565b9250610be79050565b610be085600083900363ffffffff611a4516565b9350849250505b509250929050565b60606003805480602002602001604051908101604052809291908181526020018280548015610b6857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c29575050505050905090565b60008082610c5d8161195a565b5050506001600160a01b03166000908152600660209081526040808320546007909252909120549091565b60008083610c958161195a565b6001600160a01b03851660009081526004602052604081205490811315610cd257610cc6858263ffffffff611a4516565b9350849250610be79050565b610ce685600083900363ffffffff6119fa16565b9350610cfc84600083900363ffffffff611a4516565b925050509250929050565b6000806000831215610d1e57826000039050610d21565b50815b600a8110158015610d335750600a8106155b15610d4157600a9004610d21565b60011492915050565b82610d548161195a565b610d5c6119b5565b6103e8831115610da5576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206d696e696d756d60881b604482015290519081900360640190fd5b6103e8821115610dee576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206d6178696d756d60881b604482015290519081900360640190fd5b82821015610e33576040805162461bcd60e51b815260206004820152600d60248201526c696e76616c69642072616e676560981b604482015290519081900360640190fd5b6001600160a01b0384166000818152600660209081526040808320879055600782529182902085905581519283528201859052818101849052517fe3b935f735d8a72a31934e03fd96d995c5b3096c7362bc7e8796ab9e1ffe668c9181900360600190a150505050565b600081610ea98161195a565b50506001600160a01b031660009081526004602052604090205490565b610ece6119b5565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b81610f228161195a565b610f2a6119b5565b6001600160a01b038316600081815260086020908152604091829020805460ff191686151590811790915582519384529083015280517f6567e54649bc4d1136cad0f12cfc472ef5c8255ad12c3e46ecf4ef245f06c6cc9281900390910190a1505050565b6000546001600160a01b031690565b600080546001600160a01b0316610fb3611a9e565b6001600160a01b031614905090565b610fca6119b5565b8061100d576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103330b1ba37b960911b604482015290519081900360640190fd5b8060011480611020575061102081610d07565b611071576040805162461bcd60e51b815260206004820152601a60248201527f666163746f72206d75737420626520706f776572206f66203130000000000000604482015290519081900360640190fd5b6001600160a01b0382166000818152600460209081526040918290208490558151928352820183905280517fbd9d78e6bf6327f299e2cc40ef087c54546ef9ac6bea857cdc90b57270bbb5899281900390910190a15050565b816110d48161195a565b6110dc6119b5565b6001600160a01b0383811660008181526005602090815260409182902080546001600160a01b0319169487169485179055815192835282019290925281517fd565484d693f5157abcceb853139678038bc740991b0a4dc3baa2426325bb3c0929181900390910190a1505050565b6111526119b5565b85518551811480156111645750808551145b80156111705750808451145b801561117c5750808351145b80156111885750808251145b6111cb576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b604482015290519081900360640190fd5b60005b8181101561125e576112568882815181106111e557fe5b60200260200101518883815181106111f957fe5b602002602001015188848151811061120d57fe5b602002602001015188858151811061122157fe5b602002602001015188868151811061123557fe5b602002602001015188878151811061124957fe5b60200260200101516116e0565b6001016111ce565b5050505050505050565b6000826112748161195a565b8361127e81611aa2565b600061128a8686610b73565b50600254604080516370a0823160e01b81526001600160a01b0392831660048201529051929350600092918916916370a0823191602480820192602092909190829003018186803b1580156112de57600080fd5b505afa1580156112f2573d6000803e3d6000fd5b505050506040513d602081101561130857600080fd5b5051905060006113188883610b73565b509050600061132d828563ffffffff611b0316565b905060006113498561133d61161a565b9063ffffffff611b0316565b9050600061136f82611363856103e863ffffffff611a4516565b9063ffffffff6119fa16565b6001600160a01b038c16600090815260076020526040902054101598505050505050505b505092915050565b6000816113a78161195a565b50506001600160a01b031660009081526008602052604090205460ff1690565b6002546001600160a01b03161561141b576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b611423611b5d565b600280546001600160a01b0319166001600160a01b038316179055604080518082019091526003808252620332e360ec1b602090920191825261146891600191611de5565b5050565b6000826114788161195a565b8361148281611aa2565b600061148e8686610b73565b50600254604080516370a0823160e01b81526001600160a01b0392831660048201529051929350600092918916916370a0823191602480820192602092909190829003018186803b1580156114e257600080fd5b505afa1580156114f6573d6000803e3d6000fd5b505050506040513d602081101561150c57600080fd5b50519050600061151c8883610b73565b50905082811015611574576040805162461bcd60e51b815260206004820181905260248201527f6261737365742062616c616e6365206973206e6f742073756666696369656e74604482015290519081900360640190fd5b6000611586828563ffffffff611c0716565b905060006115a28561159661161a565b9063ffffffff611c0716565b6001600160a01b038b16600090815260066020526040902054909150816115d157159750611393945050505050565b60006115e983611363866103e863ffffffff611a4516565b91909110159b9a5050505050505050505050565b6001600160a01b0316600090815260046020526040902054151590565b6000805b6003548110156116dc5760006003828154811061163757fe5b6000918252602080832090910154600254604080516370a0823160e01b81526001600160a01b039283166004820152905191909216945084926370a082319260248082019391829003018186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d60208110156116bb57600080fd5b5051905060006116cb8383610b73565b50949094019350505060010161161e565b5090565b6116e86119b5565b6001600160a01b03861661173c576040805162461bcd60e51b8152602060048201526016602482015275696e76616c696420626173736574206164647265737360501b604482015290519081900360640190fd5b6001600160a01b0386166000908152600460205260409020541561179f576040805162461bcd60e51b815260206004820152601560248201527462617373657420616c72656164792065786973747360581b604482015290519081900360640190fd5b846117e2576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b2103330b1ba37b960911b604482015290519081900360640190fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0388161790556118378686610fc2565b611842868484610d4a565b61184c86856110ca565b6118568682610f18565b604080516001600160a01b038816815290517fa83f9302fa4684335dd26b1bdd925929618565fa0f22bd9e91ab01753d8bf13c9181900360200190a1505050505050565b6118a26119b5565b6118ab81611c49565b50565b6000816118ba8161195a565b50506001600160a01b039081166000908152600560205260409020541690565b600254604080516370a0823160e01b81526001600160a01b03928316600482015290516000928416916370a08231916024808301926020929190829003018186803b15801561192857600080fd5b505afa15801561193c573d6000803e3d6000fd5b505050506040513d602081101561195257600080fd5b505192915050565b6001600160a01b0381166000908152600460205260409020546118ab576040805162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590818985cdcd95d60921b604482015290519081900360640190fd5b6119bd610f9e565b6119f85760405162461bcd60e51b815260040180806020018281038252602d815260200180611ec8602d913960400191505060405180910390fd5b565b6000611a3c83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611ce9565b90505b92915050565b600082611a5457506000611a3f565b82820282848281611a6157fe5b0414611a3c5760405162461bcd60e51b8152600401808060200182810382526021815260200180611ea76021913960400191505060405180910390fd5b3390565b6001600160a01b03811660009081526008602052604090205460ff16156118ab576040805162461bcd60e51b815260206004820152601060248201526f18985cdcd95d081a5cc81c185d5cd95960821b604482015290519081900360640190fd5b600082820183811015611a3c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000546001600160a01b031615611bb1576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000611bbb611a9e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b6000611a3c83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611d8b565b6001600160a01b038116611c8e5760405162461bcd60e51b8152600401808060200182810382526033815260200180611e746033913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008183611d755760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d3a578181015183820152602001611d22565b50505050905090810190601f168015611d675780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611d8157fe5b0495945050505050565b60008184841115611ddd5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611d3a578181015183820152602001611d22565b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e2657805160ff1916838001178555611e53565b82800160010185558215611e53579182015b82811115611e53578251825591602001919060010190611e38565b506116dc92610b709250905b808211156116dc5760008155600101611e5f56fe496e697469616c697a61626c654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e697469616c697a61626c654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a265627a7a72315820ad7db8a99e37429e4c97650af575a4f44badabe5a4ef9fa754e4adb52e87e90364736f6c63430005110032",
  "devdoc": {
    "details": "Contract is responsible for mAsset and bAsset exchange process and managing basket with bAsset tokens. Allows to add and/or remove bAsset, calculate balances, converts tokens quantity to adjust precisions or set/get parameters: bridge, factor, range and paused.",
    "methods": {
      "addBasset(address,int256,address,uint256,uint256,bool)": {
        "details": "Adds a new bAsset.",
        "params": {
          "_basset": "Address of bAsset.",
          "_bridge": "Address of bridge.",
          "_factor": "Factor amount.",
          "_max": "Maximum ratio in basket.",
          "_min": "Minimum ratio in basket.",
          "_paused": "Flag to determine if basset should be paused."
        }
      },
      "addBassets(address[],int256[],address[],uint256[],uint256[],bool[])": {
        "details": "Adds multiple bAssets."
      },
      "checkBasketBalanceForDeposit(address,uint256)": {
        "details": "Checks if ratio of bAssets in basket is within limits to make a deposit of specific asset.",
        "params": {
          "_basset": "Address of bAsset to deposit.",
          "_bassetQuantity": "Amount of bAssets to deposit."
        },
        "return": "Flag indicating whether a deposit can be made."
      },
      "checkBasketBalanceForWithdrawal(address,uint256)": {
        "details": "Checks if ratio of bAssets in basket is within limits to make a withdrawal of specific asset.",
        "params": {
          "_basset": "Address of bAsset to redeem.",
          "_bassetQuantity": "Amount of bAssets to redeem."
        },
        "return": "Flag indicating whether a withdrawal can be made."
      },
      "convertBassetToMassetQuantity(address,uint256)": {
        "details": "Converts bAsset to mAsset quantity. This is used to adjust precision.     Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.     Since the ratio may cause fractions, the bAsset is adjusted to match nearest non fraction amount and returned.",
        "params": {
          "_basset": "Address of bAsset.",
          "_bassetQuantity": "Amount of bAssets to check."
        },
        "return": "Calculated amount of mAssets and Adjusted amount of bAssets."
      },
      "convertMassetToBassetQuantity(address,uint256)": {
        "details": "Converts mAsset to bAsset quantity. This is used to adjust precisions.     Despite bAssets and mAssets having 1:1 ratio, they may have diffrent decimal factors.     Since the ratio may cause fractions, the mAsset is adjusted to match nearest non fraction amount and returned.",
        "params": {
          "_basset": "Address of bAsset.",
          "_massetQuantity": "Amount of mAssets to check."
        },
        "return": "Calculated amount of bAssets and Adjusted amount of mAssets."
      },
      "getTotalMassetBalance()": {
        "details": "Calculates total mAsset balance.",
        "return": "Calculated total balance."
      },
      "initialize(address)": {
        "details": "Contract initializer.",
        "params": {
          "_masset": "Address of the mAsset contract."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "isPowerOfTen(int256)": {
        "details": "Returns true if the number is power of ten.",
        "params": {
          "x": "Number to be checked."
        },
        "return": "Is the number power of ten."
      },
      "isValidBasset(address)": {
        "details": "Checks if bAasset is valid by checking its presence in the bAssets factors list."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeBasset(address)": {
        "details": "Removes bAsset",
        "params": {
          "_basset": "Address of bAsset to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BasketManagerV3"
  },
  "userdoc": {
    "methods": {
      "addBassets(address[],int256[],address[],uint256[],uint256[],bool[])": {
        "notice": "All parameters must be arrays with proper order and equal length."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14369,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14640,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 14642,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "masset",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14645,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "bassetsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14649,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "factorMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 14653,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "bridgeMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14657,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "minMap",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14661,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "maxMap",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14665,
        "contract": "contracts/masset/BasketManagerV3.sol:BasketManagerV3",
        "label": "pausedMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}